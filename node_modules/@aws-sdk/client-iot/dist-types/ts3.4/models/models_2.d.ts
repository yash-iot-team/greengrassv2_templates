import { MetadataBearer as $MetadataBearer, SmithyException as __SmithyException } from "@aws-sdk/types";
import { AbortConfig, AggregationType, AlertTarget, AttributePayload, AuditCheckConfiguration, AuditFrequency, AuditMitigationActionsTaskTarget, AuditNotificationTarget, AuthInfo, AuthorizerConfig, AuthorizerStatus, AuthResult, AutoRegistrationStatus, Behavior, BillingGroupProperties, CustomMetricType, DayOfWeek, DimensionType, FleetMetricUnit, JobExecutionsRetryConfig, JobExecutionsRolloutConfig, LogLevel, MetricToRetain, MetricValue, MitigationActionParams, PresignedUrlConfig, ProvisioningHook, ResourceIdentifier, StreamFile, Tag, ThingGroupProperties, ThingTypeProperties, TimeoutConfig, TopicRuleDestinationStatus, TopicRulePayload, VerificationState, ViolationEventAdditionalInfo } from "./models_0";
import { BehaviorCriteriaType, CACertificateStatus, CertificateStatus, Configuration, DetectMitigationActionsTaskTarget, DomainConfigurationStatus, LogTargetType, RegistrationConfig, ReportType, Status, ThingGroupIndexingConfiguration, ThingIndexingConfiguration, ThingTypeMetadata, ViolationEventOccurrenceRange } from "./models_1";
export interface ListThingRegistrationTaskReportsRequest {
    
    taskId: string | undefined;
    
    reportType: ReportType | string | undefined;
    
    nextToken?: string;
    
    maxResults?: number;
}
export declare namespace ListThingRegistrationTaskReportsRequest {
    
    const filterSensitiveLog: (obj: ListThingRegistrationTaskReportsRequest) => any;
}
export interface ListThingRegistrationTaskReportsResponse {
    
    resourceLinks?: string[];
    
    reportType?: ReportType | string;
    
    nextToken?: string;
}
export declare namespace ListThingRegistrationTaskReportsResponse {
    
    const filterSensitiveLog: (obj: ListThingRegistrationTaskReportsResponse) => any;
}
export interface ListThingRegistrationTasksRequest {
    
    nextToken?: string;
    
    maxResults?: number;
    
    status?: Status | string;
}
export declare namespace ListThingRegistrationTasksRequest {
    
    const filterSensitiveLog: (obj: ListThingRegistrationTasksRequest) => any;
}
export interface ListThingRegistrationTasksResponse {
    
    taskIds?: string[];
    
    nextToken?: string;
}
export declare namespace ListThingRegistrationTasksResponse {
    
    const filterSensitiveLog: (obj: ListThingRegistrationTasksResponse) => any;
}

export interface ListThingsRequest {
    
    nextToken?: string;
    
    maxResults?: number;
    
    attributeName?: string;
    
    attributeValue?: string;
    
    thingTypeName?: string;
    
    usePrefixAttributeValue?: boolean;
}
export declare namespace ListThingsRequest {
    
    const filterSensitiveLog: (obj: ListThingsRequest) => any;
}

export interface ThingAttribute {
    
    thingName?: string;
    
    thingTypeName?: string;
    
    thingArn?: string;
    
    attributes?: {
        [key: string]: string;
    };
    
    version?: number;
}
export declare namespace ThingAttribute {
    
    const filterSensitiveLog: (obj: ThingAttribute) => any;
}

export interface ListThingsResponse {
    
    things?: ThingAttribute[];
    
    nextToken?: string;
}
export declare namespace ListThingsResponse {
    
    const filterSensitiveLog: (obj: ListThingsResponse) => any;
}
export interface ListThingsInBillingGroupRequest {
    
    billingGroupName: string | undefined;
    
    nextToken?: string;
    
    maxResults?: number;
}
export declare namespace ListThingsInBillingGroupRequest {
    
    const filterSensitiveLog: (obj: ListThingsInBillingGroupRequest) => any;
}
export interface ListThingsInBillingGroupResponse {
    
    things?: string[];
    
    nextToken?: string;
}
export declare namespace ListThingsInBillingGroupResponse {
    
    const filterSensitiveLog: (obj: ListThingsInBillingGroupResponse) => any;
}
export interface ListThingsInThingGroupRequest {
    
    thingGroupName: string | undefined;
    
    recursive?: boolean;
    
    nextToken?: string;
    
    maxResults?: number;
}
export declare namespace ListThingsInThingGroupRequest {
    
    const filterSensitiveLog: (obj: ListThingsInThingGroupRequest) => any;
}
export interface ListThingsInThingGroupResponse {
    
    things?: string[];
    
    nextToken?: string;
}
export declare namespace ListThingsInThingGroupResponse {
    
    const filterSensitiveLog: (obj: ListThingsInThingGroupResponse) => any;
}

export interface ListThingTypesRequest {
    
    nextToken?: string;
    
    maxResults?: number;
    
    thingTypeName?: string;
}
export declare namespace ListThingTypesRequest {
    
    const filterSensitiveLog: (obj: ListThingTypesRequest) => any;
}

export interface ThingTypeDefinition {
    
    thingTypeName?: string;
    
    thingTypeArn?: string;
    
    thingTypeProperties?: ThingTypeProperties;
    
    thingTypeMetadata?: ThingTypeMetadata;
}
export declare namespace ThingTypeDefinition {
    
    const filterSensitiveLog: (obj: ThingTypeDefinition) => any;
}

export interface ListThingTypesResponse {
    
    thingTypes?: ThingTypeDefinition[];
    
    nextToken?: string;
}
export declare namespace ListThingTypesResponse {
    
    const filterSensitiveLog: (obj: ListThingTypesResponse) => any;
}
export interface ListTopicRuleDestinationsRequest {
    
    maxResults?: number;
    
    nextToken?: string;
}
export declare namespace ListTopicRuleDestinationsRequest {
    
    const filterSensitiveLog: (obj: ListTopicRuleDestinationsRequest) => any;
}

export interface HttpUrlDestinationSummary {
    
    confirmationUrl?: string;
}
export declare namespace HttpUrlDestinationSummary {
    
    const filterSensitiveLog: (obj: HttpUrlDestinationSummary) => any;
}

export interface VpcDestinationSummary {
    
    subnetIds?: string[];
    
    securityGroups?: string[];
    
    vpcId?: string;
    
    roleArn?: string;
}
export declare namespace VpcDestinationSummary {
    
    const filterSensitiveLog: (obj: VpcDestinationSummary) => any;
}

export interface TopicRuleDestinationSummary {
    
    arn?: string;
    
    status?: TopicRuleDestinationStatus | string;
    
    createdAt?: Date;
    
    lastUpdatedAt?: Date;
    
    statusReason?: string;
    
    httpUrlSummary?: HttpUrlDestinationSummary;
    
    vpcDestinationSummary?: VpcDestinationSummary;
}
export declare namespace TopicRuleDestinationSummary {
    
    const filterSensitiveLog: (obj: TopicRuleDestinationSummary) => any;
}
export interface ListTopicRuleDestinationsResponse {
    
    destinationSummaries?: TopicRuleDestinationSummary[];
    
    nextToken?: string;
}
export declare namespace ListTopicRuleDestinationsResponse {
    
    const filterSensitiveLog: (obj: ListTopicRuleDestinationsResponse) => any;
}

export interface ListTopicRulesRequest {
    
    topic?: string;
    
    maxResults?: number;
    
    nextToken?: string;
    
    ruleDisabled?: boolean;
}
export declare namespace ListTopicRulesRequest {
    
    const filterSensitiveLog: (obj: ListTopicRulesRequest) => any;
}

export interface TopicRuleListItem {
    
    ruleArn?: string;
    
    ruleName?: string;
    
    topicPattern?: string;
    
    createdAt?: Date;
    
    ruleDisabled?: boolean;
}
export declare namespace TopicRuleListItem {
    
    const filterSensitiveLog: (obj: TopicRuleListItem) => any;
}

export interface ListTopicRulesResponse {
    
    rules?: TopicRuleListItem[];
    
    nextToken?: string;
}
export declare namespace ListTopicRulesResponse {
    
    const filterSensitiveLog: (obj: ListTopicRulesResponse) => any;
}
export interface ListV2LoggingLevelsRequest {
    
    targetType?: LogTargetType | string;
    
    nextToken?: string;
    
    maxResults?: number;
}
export declare namespace ListV2LoggingLevelsRequest {
    
    const filterSensitiveLog: (obj: ListV2LoggingLevelsRequest) => any;
}

export interface LogTarget {
    
    targetType: LogTargetType | string | undefined;
    
    targetName?: string;
}
export declare namespace LogTarget {
    
    const filterSensitiveLog: (obj: LogTarget) => any;
}

export interface LogTargetConfiguration {
    
    logTarget?: LogTarget;
    
    logLevel?: LogLevel | string;
}
export declare namespace LogTargetConfiguration {
    
    const filterSensitiveLog: (obj: LogTargetConfiguration) => any;
}
export interface ListV2LoggingLevelsResponse {
    
    logTargetConfigurations?: LogTargetConfiguration[];
    
    nextToken?: string;
}
export declare namespace ListV2LoggingLevelsResponse {
    
    const filterSensitiveLog: (obj: ListV2LoggingLevelsResponse) => any;
}
export interface ListViolationEventsRequest {
    
    startTime: Date | undefined;
    
    endTime: Date | undefined;
    
    thingName?: string;
    
    securityProfileName?: string;
    
    behaviorCriteriaType?: BehaviorCriteriaType | string;
    
    listSuppressedAlerts?: boolean;
    
    verificationState?: VerificationState | string;
    
    nextToken?: string;
    
    maxResults?: number;
}
export declare namespace ListViolationEventsRequest {
    
    const filterSensitiveLog: (obj: ListViolationEventsRequest) => any;
}
export declare enum ViolationEventType {
    ALARM_CLEARED = "alarm-cleared",
    ALARM_INVALIDATED = "alarm-invalidated",
    IN_ALARM = "in-alarm"
}

export interface ViolationEvent {
    
    violationId?: string;
    
    thingName?: string;
    
    securityProfileName?: string;
    
    behavior?: Behavior;
    
    metricValue?: MetricValue;
    
    violationEventAdditionalInfo?: ViolationEventAdditionalInfo;
    
    violationEventType?: ViolationEventType | string;
    
    verificationState?: VerificationState | string;
    
    verificationStateDescription?: string;
    
    violationEventTime?: Date;
}
export declare namespace ViolationEvent {
    
    const filterSensitiveLog: (obj: ViolationEvent) => any;
}
export interface ListViolationEventsResponse {
    
    violationEvents?: ViolationEvent[];
    
    nextToken?: string;
}
export declare namespace ListViolationEventsResponse {
    
    const filterSensitiveLog: (obj: ListViolationEventsResponse) => any;
}
export interface PutVerificationStateOnViolationRequest {
    
    violationId: string | undefined;
    
    verificationState: VerificationState | string | undefined;
    
    verificationStateDescription?: string;
}
export declare namespace PutVerificationStateOnViolationRequest {
    
    const filterSensitiveLog: (obj: PutVerificationStateOnViolationRequest) => any;
}
export interface PutVerificationStateOnViolationResponse {
}
export declare namespace PutVerificationStateOnViolationResponse {
    
    const filterSensitiveLog: (obj: PutVerificationStateOnViolationResponse) => any;
}

export interface RegisterCACertificateRequest {
    
    caCertificate: string | undefined;
    
    verificationCertificate: string | undefined;
    
    setAsActive?: boolean;
    
    allowAutoRegistration?: boolean;
    
    registrationConfig?: RegistrationConfig;
    
    tags?: Tag[];
}
export declare namespace RegisterCACertificateRequest {
    
    const filterSensitiveLog: (obj: RegisterCACertificateRequest) => any;
}

export interface RegisterCACertificateResponse {
    
    certificateArn?: string;
    
    certificateId?: string;
}
export declare namespace RegisterCACertificateResponse {
    
    const filterSensitiveLog: (obj: RegisterCACertificateResponse) => any;
}

export interface RegistrationCodeValidationException extends __SmithyException, $MetadataBearer {
    name: "RegistrationCodeValidationException";
    $fault: "client";
    
    message?: string;
}

export interface CertificateConflictException extends __SmithyException, $MetadataBearer {
    name: "CertificateConflictException";
    $fault: "client";
    
    message?: string;
}

export interface RegisterCertificateRequest {
    
    certificatePem: string | undefined;
    
    caCertificatePem?: string;
    
    setAsActive?: boolean;
    
    status?: CertificateStatus | string;
}
export declare namespace RegisterCertificateRequest {
    
    const filterSensitiveLog: (obj: RegisterCertificateRequest) => any;
}

export interface RegisterCertificateResponse {
    
    certificateArn?: string;
    
    certificateId?: string;
}
export declare namespace RegisterCertificateResponse {
    
    const filterSensitiveLog: (obj: RegisterCertificateResponse) => any;
}
export interface RegisterCertificateWithoutCARequest {
    
    certificatePem: string | undefined;
    
    status?: CertificateStatus | string;
}
export declare namespace RegisterCertificateWithoutCARequest {
    
    const filterSensitiveLog: (obj: RegisterCertificateWithoutCARequest) => any;
}
export interface RegisterCertificateWithoutCAResponse {
    
    certificateArn?: string;
    
    certificateId?: string;
}
export declare namespace RegisterCertificateWithoutCAResponse {
    
    const filterSensitiveLog: (obj: RegisterCertificateWithoutCAResponse) => any;
}
export interface RegisterThingRequest {
    
    templateBody: string | undefined;
    
    parameters?: {
        [key: string]: string;
    };
}
export declare namespace RegisterThingRequest {
    
    const filterSensitiveLog: (obj: RegisterThingRequest) => any;
}
export interface RegisterThingResponse {
    
    certificatePem?: string;
    
    resourceArns?: {
        [key: string]: string;
    };
}
export declare namespace RegisterThingResponse {
    
    const filterSensitiveLog: (obj: RegisterThingResponse) => any;
}

export interface ResourceRegistrationFailureException extends __SmithyException, $MetadataBearer {
    name: "ResourceRegistrationFailureException";
    $fault: "client";
    
    message?: string;
}

export interface RejectCertificateTransferRequest {
    
    certificateId: string | undefined;
    
    rejectReason?: string;
}
export declare namespace RejectCertificateTransferRequest {
    
    const filterSensitiveLog: (obj: RejectCertificateTransferRequest) => any;
}
export interface RemoveThingFromBillingGroupRequest {
    
    billingGroupName?: string;
    
    billingGroupArn?: string;
    
    thingName?: string;
    
    thingArn?: string;
}
export declare namespace RemoveThingFromBillingGroupRequest {
    
    const filterSensitiveLog: (obj: RemoveThingFromBillingGroupRequest) => any;
}
export interface RemoveThingFromBillingGroupResponse {
}
export declare namespace RemoveThingFromBillingGroupResponse {
    
    const filterSensitiveLog: (obj: RemoveThingFromBillingGroupResponse) => any;
}
export interface RemoveThingFromThingGroupRequest {
    
    thingGroupName?: string;
    
    thingGroupArn?: string;
    
    thingName?: string;
    
    thingArn?: string;
}
export declare namespace RemoveThingFromThingGroupRequest {
    
    const filterSensitiveLog: (obj: RemoveThingFromThingGroupRequest) => any;
}
export interface RemoveThingFromThingGroupResponse {
}
export declare namespace RemoveThingFromThingGroupResponse {
    
    const filterSensitiveLog: (obj: RemoveThingFromThingGroupResponse) => any;
}

export interface ReplaceTopicRuleRequest {
    
    ruleName: string | undefined;
    
    topicRulePayload: TopicRulePayload | undefined;
}
export declare namespace ReplaceTopicRuleRequest {
    
    const filterSensitiveLog: (obj: ReplaceTopicRuleRequest) => any;
}
export interface SearchIndexRequest {
    
    indexName?: string;
    
    queryString: string | undefined;
    
    nextToken?: string;
    
    maxResults?: number;
    
    queryVersion?: string;
}
export declare namespace SearchIndexRequest {
    
    const filterSensitiveLog: (obj: SearchIndexRequest) => any;
}

export interface ThingGroupDocument {
    
    thingGroupName?: string;
    
    thingGroupId?: string;
    
    thingGroupDescription?: string;
    
    attributes?: {
        [key: string]: string;
    };
    
    parentGroupNames?: string[];
}
export declare namespace ThingGroupDocument {
    
    const filterSensitiveLog: (obj: ThingGroupDocument) => any;
}

export interface ThingConnectivity {
    
    connected?: boolean;
    
    timestamp?: number;
    
    disconnectReason?: string;
}
export declare namespace ThingConnectivity {
    
    const filterSensitiveLog: (obj: ThingConnectivity) => any;
}

export interface ThingDocument {
    
    thingName?: string;
    
    thingId?: string;
    
    thingTypeName?: string;
    
    thingGroupNames?: string[];
    
    attributes?: {
        [key: string]: string;
    };
    
    shadow?: string;
    
    deviceDefender?: string;
    
    connectivity?: ThingConnectivity;
}
export declare namespace ThingDocument {
    
    const filterSensitiveLog: (obj: ThingDocument) => any;
}
export interface SearchIndexResponse {
    
    nextToken?: string;
    
    things?: ThingDocument[];
    
    thingGroups?: ThingGroupDocument[];
}
export declare namespace SearchIndexResponse {
    
    const filterSensitiveLog: (obj: SearchIndexResponse) => any;
}
export interface SetDefaultAuthorizerRequest {
    
    authorizerName: string | undefined;
}
export declare namespace SetDefaultAuthorizerRequest {
    
    const filterSensitiveLog: (obj: SetDefaultAuthorizerRequest) => any;
}
export interface SetDefaultAuthorizerResponse {
    
    authorizerName?: string;
    
    authorizerArn?: string;
}
export declare namespace SetDefaultAuthorizerResponse {
    
    const filterSensitiveLog: (obj: SetDefaultAuthorizerResponse) => any;
}

export interface SetDefaultPolicyVersionRequest {
    
    policyName: string | undefined;
    
    policyVersionId: string | undefined;
}
export declare namespace SetDefaultPolicyVersionRequest {
    
    const filterSensitiveLog: (obj: SetDefaultPolicyVersionRequest) => any;
}

export interface LoggingOptionsPayload {
    
    roleArn: string | undefined;
    
    logLevel?: LogLevel | string;
}
export declare namespace LoggingOptionsPayload {
    
    const filterSensitiveLog: (obj: LoggingOptionsPayload) => any;
}

export interface SetLoggingOptionsRequest {
    
    loggingOptionsPayload: LoggingOptionsPayload | undefined;
}
export declare namespace SetLoggingOptionsRequest {
    
    const filterSensitiveLog: (obj: SetLoggingOptionsRequest) => any;
}
export interface SetV2LoggingLevelRequest {
    
    logTarget: LogTarget | undefined;
    
    logLevel: LogLevel | string | undefined;
}
export declare namespace SetV2LoggingLevelRequest {
    
    const filterSensitiveLog: (obj: SetV2LoggingLevelRequest) => any;
}
export interface SetV2LoggingOptionsRequest {
    
    roleArn?: string;
    
    defaultLogLevel?: LogLevel | string;
    
    disableAllLogs?: boolean;
}
export declare namespace SetV2LoggingOptionsRequest {
    
    const filterSensitiveLog: (obj: SetV2LoggingOptionsRequest) => any;
}
export interface StartAuditMitigationActionsTaskRequest {
    
    taskId: string | undefined;
    
    target: AuditMitigationActionsTaskTarget | undefined;
    
    auditCheckToActionsMapping: {
        [key: string]: string[];
    } | undefined;
    
    clientRequestToken?: string;
}
export declare namespace StartAuditMitigationActionsTaskRequest {
    
    const filterSensitiveLog: (obj: StartAuditMitigationActionsTaskRequest) => any;
}
export interface StartAuditMitigationActionsTaskResponse {
    
    taskId?: string;
}
export declare namespace StartAuditMitigationActionsTaskResponse {
    
    const filterSensitiveLog: (obj: StartAuditMitigationActionsTaskResponse) => any;
}

export interface TaskAlreadyExistsException extends __SmithyException, $MetadataBearer {
    name: "TaskAlreadyExistsException";
    $fault: "client";
    message?: string;
}
export interface StartDetectMitigationActionsTaskRequest {
    
    taskId: string | undefined;
    
    target: DetectMitigationActionsTaskTarget | undefined;
    
    actions: string[] | undefined;
    
    violationEventOccurrenceRange?: ViolationEventOccurrenceRange;
    
    includeOnlyActiveViolations?: boolean;
    
    includeSuppressedAlerts?: boolean;
    
    clientRequestToken?: string;
}
export declare namespace StartDetectMitigationActionsTaskRequest {
    
    const filterSensitiveLog: (obj: StartDetectMitigationActionsTaskRequest) => any;
}
export interface StartDetectMitigationActionsTaskResponse {
    
    taskId?: string;
}
export declare namespace StartDetectMitigationActionsTaskResponse {
    
    const filterSensitiveLog: (obj: StartDetectMitigationActionsTaskResponse) => any;
}
export interface StartOnDemandAuditTaskRequest {
    
    targetCheckNames: string[] | undefined;
}
export declare namespace StartOnDemandAuditTaskRequest {
    
    const filterSensitiveLog: (obj: StartOnDemandAuditTaskRequest) => any;
}
export interface StartOnDemandAuditTaskResponse {
    
    taskId?: string;
}
export declare namespace StartOnDemandAuditTaskResponse {
    
    const filterSensitiveLog: (obj: StartOnDemandAuditTaskResponse) => any;
}
export interface StartThingRegistrationTaskRequest {
    
    templateBody: string | undefined;
    
    inputFileBucket: string | undefined;
    
    inputFileKey: string | undefined;
    
    roleArn: string | undefined;
}
export declare namespace StartThingRegistrationTaskRequest {
    
    const filterSensitiveLog: (obj: StartThingRegistrationTaskRequest) => any;
}
export interface StartThingRegistrationTaskResponse {
    
    taskId?: string;
}
export declare namespace StartThingRegistrationTaskResponse {
    
    const filterSensitiveLog: (obj: StartThingRegistrationTaskResponse) => any;
}
export interface StopThingRegistrationTaskRequest {
    
    taskId: string | undefined;
}
export declare namespace StopThingRegistrationTaskRequest {
    
    const filterSensitiveLog: (obj: StopThingRegistrationTaskRequest) => any;
}
export interface StopThingRegistrationTaskResponse {
}
export declare namespace StopThingRegistrationTaskResponse {
    
    const filterSensitiveLog: (obj: StopThingRegistrationTaskResponse) => any;
}
export interface TagResourceRequest {
    
    resourceArn: string | undefined;
    
    tags: Tag[] | undefined;
}
export declare namespace TagResourceRequest {
    
    const filterSensitiveLog: (obj: TagResourceRequest) => any;
}
export interface TagResourceResponse {
}
export declare namespace TagResourceResponse {
    
    const filterSensitiveLog: (obj: TagResourceResponse) => any;
}
export interface TestAuthorizationRequest {
    
    principal?: string;
    
    cognitoIdentityPoolId?: string;
    
    authInfos: AuthInfo[] | undefined;
    
    clientId?: string;
    
    policyNamesToAdd?: string[];
    
    policyNamesToSkip?: string[];
}
export declare namespace TestAuthorizationRequest {
    
    const filterSensitiveLog: (obj: TestAuthorizationRequest) => any;
}
export interface TestAuthorizationResponse {
    
    authResults?: AuthResult[];
}
export declare namespace TestAuthorizationResponse {
    
    const filterSensitiveLog: (obj: TestAuthorizationResponse) => any;
}

export interface InvalidResponseException extends __SmithyException, $MetadataBearer {
    name: "InvalidResponseException";
    $fault: "client";
    
    message?: string;
}

export interface HttpContext {
    
    headers?: {
        [key: string]: string;
    };
    
    queryString?: string;
}
export declare namespace HttpContext {
    
    const filterSensitiveLog: (obj: HttpContext) => any;
}

export interface MqttContext {
    
    username?: string;
    
    password?: Uint8Array;
    
    clientId?: string;
}
export declare namespace MqttContext {
    
    const filterSensitiveLog: (obj: MqttContext) => any;
}

export interface TlsContext {
    
    serverName?: string;
}
export declare namespace TlsContext {
    
    const filterSensitiveLog: (obj: TlsContext) => any;
}
export interface TestInvokeAuthorizerRequest {
    
    authorizerName: string | undefined;
    
    token?: string;
    
    tokenSignature?: string;
    
    httpContext?: HttpContext;
    
    mqttContext?: MqttContext;
    
    tlsContext?: TlsContext;
}
export declare namespace TestInvokeAuthorizerRequest {
    
    const filterSensitiveLog: (obj: TestInvokeAuthorizerRequest) => any;
}
export interface TestInvokeAuthorizerResponse {
    
    isAuthenticated?: boolean;
    
    principalId?: string;
    
    policyDocuments?: string[];
    
    refreshAfterInSeconds?: number;
    
    disconnectAfterInSeconds?: number;
}
export declare namespace TestInvokeAuthorizerResponse {
    
    const filterSensitiveLog: (obj: TestInvokeAuthorizerResponse) => any;
}

export interface TransferCertificateRequest {
    
    certificateId: string | undefined;
    
    targetAwsAccount: string | undefined;
    
    transferMessage?: string;
}
export declare namespace TransferCertificateRequest {
    
    const filterSensitiveLog: (obj: TransferCertificateRequest) => any;
}

export interface TransferCertificateResponse {
    
    transferredCertificateArn?: string;
}
export declare namespace TransferCertificateResponse {
    
    const filterSensitiveLog: (obj: TransferCertificateResponse) => any;
}

export interface TransferConflictException extends __SmithyException, $MetadataBearer {
    name: "TransferConflictException";
    $fault: "client";
    
    message?: string;
}
export interface UntagResourceRequest {
    
    resourceArn: string | undefined;
    
    tagKeys: string[] | undefined;
}
export declare namespace UntagResourceRequest {
    
    const filterSensitiveLog: (obj: UntagResourceRequest) => any;
}
export interface UntagResourceResponse {
}
export declare namespace UntagResourceResponse {
    
    const filterSensitiveLog: (obj: UntagResourceResponse) => any;
}
export interface UpdateAccountAuditConfigurationRequest {
    
    roleArn?: string;
    
    auditNotificationTargetConfigurations?: {
        [key: string]: AuditNotificationTarget;
    };
    
    auditCheckConfigurations?: {
        [key: string]: AuditCheckConfiguration;
    };
}
export declare namespace UpdateAccountAuditConfigurationRequest {
    
    const filterSensitiveLog: (obj: UpdateAccountAuditConfigurationRequest) => any;
}
export interface UpdateAccountAuditConfigurationResponse {
}
export declare namespace UpdateAccountAuditConfigurationResponse {
    
    const filterSensitiveLog: (obj: UpdateAccountAuditConfigurationResponse) => any;
}
export interface UpdateAuditSuppressionRequest {
    
    checkName: string | undefined;
    
    resourceIdentifier: ResourceIdentifier | undefined;
    
    expirationDate?: Date;
    
    suppressIndefinitely?: boolean;
    
    description?: string;
}
export declare namespace UpdateAuditSuppressionRequest {
    
    const filterSensitiveLog: (obj: UpdateAuditSuppressionRequest) => any;
}
export interface UpdateAuditSuppressionResponse {
}
export declare namespace UpdateAuditSuppressionResponse {
    
    const filterSensitiveLog: (obj: UpdateAuditSuppressionResponse) => any;
}
export interface UpdateAuthorizerRequest {
    
    authorizerName: string | undefined;
    
    authorizerFunctionArn?: string;
    
    tokenKeyName?: string;
    
    tokenSigningPublicKeys?: {
        [key: string]: string;
    };
    
    status?: AuthorizerStatus | string;
    
    enableCachingForHttp?: boolean;
}
export declare namespace UpdateAuthorizerRequest {
    
    const filterSensitiveLog: (obj: UpdateAuthorizerRequest) => any;
}
export interface UpdateAuthorizerResponse {
    
    authorizerName?: string;
    
    authorizerArn?: string;
}
export declare namespace UpdateAuthorizerResponse {
    
    const filterSensitiveLog: (obj: UpdateAuthorizerResponse) => any;
}
export interface UpdateBillingGroupRequest {
    
    billingGroupName: string | undefined;
    
    billingGroupProperties: BillingGroupProperties | undefined;
    
    expectedVersion?: number;
}
export declare namespace UpdateBillingGroupRequest {
    
    const filterSensitiveLog: (obj: UpdateBillingGroupRequest) => any;
}
export interface UpdateBillingGroupResponse {
    
    version?: number;
}
export declare namespace UpdateBillingGroupResponse {
    
    const filterSensitiveLog: (obj: UpdateBillingGroupResponse) => any;
}

export interface UpdateCACertificateRequest {
    
    certificateId: string | undefined;
    
    newStatus?: CACertificateStatus | string;
    
    newAutoRegistrationStatus?: AutoRegistrationStatus | string;
    
    registrationConfig?: RegistrationConfig;
    
    removeAutoRegistration?: boolean;
}
export declare namespace UpdateCACertificateRequest {
    
    const filterSensitiveLog: (obj: UpdateCACertificateRequest) => any;
}

export interface UpdateCertificateRequest {
    
    certificateId: string | undefined;
    
    newStatus: CertificateStatus | string | undefined;
}
export declare namespace UpdateCertificateRequest {
    
    const filterSensitiveLog: (obj: UpdateCertificateRequest) => any;
}
export interface UpdateCustomMetricRequest {
    
    metricName: string | undefined;
    
    displayName: string | undefined;
}
export declare namespace UpdateCustomMetricRequest {
    
    const filterSensitiveLog: (obj: UpdateCustomMetricRequest) => any;
}
export interface UpdateCustomMetricResponse {
    
    metricName?: string;
    
    metricArn?: string;
    
    metricType?: CustomMetricType | string;
    
    displayName?: string;
    
    creationDate?: Date;
    
    lastModifiedDate?: Date;
}
export declare namespace UpdateCustomMetricResponse {
    
    const filterSensitiveLog: (obj: UpdateCustomMetricResponse) => any;
}
export interface UpdateDimensionRequest {
    
    name: string | undefined;
    
    stringValues: string[] | undefined;
}
export declare namespace UpdateDimensionRequest {
    
    const filterSensitiveLog: (obj: UpdateDimensionRequest) => any;
}
export interface UpdateDimensionResponse {
    
    name?: string;
    
    arn?: string;
    
    type?: DimensionType | string;
    
    stringValues?: string[];
    
    creationDate?: Date;
    
    lastModifiedDate?: Date;
}
export declare namespace UpdateDimensionResponse {
    
    const filterSensitiveLog: (obj: UpdateDimensionResponse) => any;
}
export interface UpdateDomainConfigurationRequest {
    
    domainConfigurationName: string | undefined;
    
    authorizerConfig?: AuthorizerConfig;
    
    domainConfigurationStatus?: DomainConfigurationStatus | string;
    
    removeAuthorizerConfig?: boolean;
}
export declare namespace UpdateDomainConfigurationRequest {
    
    const filterSensitiveLog: (obj: UpdateDomainConfigurationRequest) => any;
}
export interface UpdateDomainConfigurationResponse {
    
    domainConfigurationName?: string;
    
    domainConfigurationArn?: string;
}
export declare namespace UpdateDomainConfigurationResponse {
    
    const filterSensitiveLog: (obj: UpdateDomainConfigurationResponse) => any;
}
export interface UpdateDynamicThingGroupRequest {
    
    thingGroupName: string | undefined;
    
    thingGroupProperties: ThingGroupProperties | undefined;
    
    expectedVersion?: number;
    
    indexName?: string;
    
    queryString?: string;
    
    queryVersion?: string;
}
export declare namespace UpdateDynamicThingGroupRequest {
    
    const filterSensitiveLog: (obj: UpdateDynamicThingGroupRequest) => any;
}
export interface UpdateDynamicThingGroupResponse {
    
    version?: number;
}
export declare namespace UpdateDynamicThingGroupResponse {
    
    const filterSensitiveLog: (obj: UpdateDynamicThingGroupResponse) => any;
}
export interface UpdateEventConfigurationsRequest {
    
    eventConfigurations?: {
        [key: string]: Configuration;
    };
}
export declare namespace UpdateEventConfigurationsRequest {
    
    const filterSensitiveLog: (obj: UpdateEventConfigurationsRequest) => any;
}
export interface UpdateEventConfigurationsResponse {
}
export declare namespace UpdateEventConfigurationsResponse {
    
    const filterSensitiveLog: (obj: UpdateEventConfigurationsResponse) => any;
}
export interface UpdateFleetMetricRequest {
    
    metricName: string | undefined;
    
    queryString?: string;
    
    aggregationType?: AggregationType;
    
    period?: number;
    
    aggregationField?: string;
    
    description?: string;
    
    queryVersion?: string;
    
    indexName: string | undefined;
    
    unit?: FleetMetricUnit | string;
    
    expectedVersion?: number;
}
export declare namespace UpdateFleetMetricRequest {
    
    const filterSensitiveLog: (obj: UpdateFleetMetricRequest) => any;
}
export interface UpdateIndexingConfigurationRequest {
    
    thingIndexingConfiguration?: ThingIndexingConfiguration;
    
    thingGroupIndexingConfiguration?: ThingGroupIndexingConfiguration;
}
export declare namespace UpdateIndexingConfigurationRequest {
    
    const filterSensitiveLog: (obj: UpdateIndexingConfigurationRequest) => any;
}
export interface UpdateIndexingConfigurationResponse {
}
export declare namespace UpdateIndexingConfigurationResponse {
    
    const filterSensitiveLog: (obj: UpdateIndexingConfigurationResponse) => any;
}
export interface UpdateJobRequest {
    
    jobId: string | undefined;
    
    description?: string;
    
    presignedUrlConfig?: PresignedUrlConfig;
    
    jobExecutionsRolloutConfig?: JobExecutionsRolloutConfig;
    
    abortConfig?: AbortConfig;
    
    timeoutConfig?: TimeoutConfig;
    
    namespaceId?: string;
    
    jobExecutionsRetryConfig?: JobExecutionsRetryConfig;
}
export declare namespace UpdateJobRequest {
    
    const filterSensitiveLog: (obj: UpdateJobRequest) => any;
}
export interface UpdateMitigationActionRequest {
    
    actionName: string | undefined;
    
    roleArn?: string;
    
    actionParams?: MitigationActionParams;
}
export declare namespace UpdateMitigationActionRequest {
    
    const filterSensitiveLog: (obj: UpdateMitigationActionRequest) => any;
}
export interface UpdateMitigationActionResponse {
    
    actionArn?: string;
    
    actionId?: string;
}
export declare namespace UpdateMitigationActionResponse {
    
    const filterSensitiveLog: (obj: UpdateMitigationActionResponse) => any;
}
export interface UpdateProvisioningTemplateRequest {
    
    templateName: string | undefined;
    
    description?: string;
    
    enabled?: boolean;
    
    defaultVersionId?: number;
    
    provisioningRoleArn?: string;
    
    preProvisioningHook?: ProvisioningHook;
    
    removePreProvisioningHook?: boolean;
}
export declare namespace UpdateProvisioningTemplateRequest {
    
    const filterSensitiveLog: (obj: UpdateProvisioningTemplateRequest) => any;
}
export interface UpdateProvisioningTemplateResponse {
}
export declare namespace UpdateProvisioningTemplateResponse {
    
    const filterSensitiveLog: (obj: UpdateProvisioningTemplateResponse) => any;
}
export interface UpdateRoleAliasRequest {
    
    roleAlias: string | undefined;
    
    roleArn?: string;
    
    credentialDurationSeconds?: number;
}
export declare namespace UpdateRoleAliasRequest {
    
    const filterSensitiveLog: (obj: UpdateRoleAliasRequest) => any;
}
export interface UpdateRoleAliasResponse {
    
    roleAlias?: string;
    
    roleAliasArn?: string;
}
export declare namespace UpdateRoleAliasResponse {
    
    const filterSensitiveLog: (obj: UpdateRoleAliasResponse) => any;
}
export interface UpdateScheduledAuditRequest {
    
    frequency?: AuditFrequency | string;
    
    dayOfMonth?: string;
    
    dayOfWeek?: DayOfWeek | string;
    
    targetCheckNames?: string[];
    
    scheduledAuditName: string | undefined;
}
export declare namespace UpdateScheduledAuditRequest {
    
    const filterSensitiveLog: (obj: UpdateScheduledAuditRequest) => any;
}
export interface UpdateScheduledAuditResponse {
    
    scheduledAuditArn?: string;
}
export declare namespace UpdateScheduledAuditResponse {
    
    const filterSensitiveLog: (obj: UpdateScheduledAuditResponse) => any;
}
export interface UpdateSecurityProfileRequest {
    
    securityProfileName: string | undefined;
    
    securityProfileDescription?: string;
    
    behaviors?: Behavior[];
    
    alertTargets?: {
        [key: string]: AlertTarget;
    };
    
    additionalMetricsToRetain?: string[];
    
    additionalMetricsToRetainV2?: MetricToRetain[];
    
    deleteBehaviors?: boolean;
    
    deleteAlertTargets?: boolean;
    
    deleteAdditionalMetricsToRetain?: boolean;
    
    expectedVersion?: number;
}
export declare namespace UpdateSecurityProfileRequest {
    
    const filterSensitiveLog: (obj: UpdateSecurityProfileRequest) => any;
}
export interface UpdateSecurityProfileResponse {
    
    securityProfileName?: string;
    
    securityProfileArn?: string;
    
    securityProfileDescription?: string;
    
    behaviors?: Behavior[];
    
    alertTargets?: {
        [key: string]: AlertTarget;
    };
    
    additionalMetricsToRetain?: string[];
    
    additionalMetricsToRetainV2?: MetricToRetain[];
    
    version?: number;
    
    creationDate?: Date;
    
    lastModifiedDate?: Date;
}
export declare namespace UpdateSecurityProfileResponse {
    
    const filterSensitiveLog: (obj: UpdateSecurityProfileResponse) => any;
}
export interface UpdateStreamRequest {
    
    streamId: string | undefined;
    
    description?: string;
    
    files?: StreamFile[];
    
    roleArn?: string;
}
export declare namespace UpdateStreamRequest {
    
    const filterSensitiveLog: (obj: UpdateStreamRequest) => any;
}
export interface UpdateStreamResponse {
    
    streamId?: string;
    
    streamArn?: string;
    
    description?: string;
    
    streamVersion?: number;
}
export declare namespace UpdateStreamResponse {
    
    const filterSensitiveLog: (obj: UpdateStreamResponse) => any;
}

export interface UpdateThingRequest {
    
    thingName: string | undefined;
    
    thingTypeName?: string;
    
    attributePayload?: AttributePayload;
    
    expectedVersion?: number;
    
    removeThingType?: boolean;
}
export declare namespace UpdateThingRequest {
    
    const filterSensitiveLog: (obj: UpdateThingRequest) => any;
}

export interface UpdateThingResponse {
}
export declare namespace UpdateThingResponse {
    
    const filterSensitiveLog: (obj: UpdateThingResponse) => any;
}
export interface UpdateThingGroupRequest {
    
    thingGroupName: string | undefined;
    
    thingGroupProperties: ThingGroupProperties | undefined;
    
    expectedVersion?: number;
}
export declare namespace UpdateThingGroupRequest {
    
    const filterSensitiveLog: (obj: UpdateThingGroupRequest) => any;
}
export interface UpdateThingGroupResponse {
    
    version?: number;
}
export declare namespace UpdateThingGroupResponse {
    
    const filterSensitiveLog: (obj: UpdateThingGroupResponse) => any;
}
export interface UpdateThingGroupsForThingRequest {
    
    thingName?: string;
    
    thingGroupsToAdd?: string[];
    
    thingGroupsToRemove?: string[];
    
    overrideDynamicGroups?: boolean;
}
export declare namespace UpdateThingGroupsForThingRequest {
    
    const filterSensitiveLog: (obj: UpdateThingGroupsForThingRequest) => any;
}
export interface UpdateThingGroupsForThingResponse {
}
export declare namespace UpdateThingGroupsForThingResponse {
    
    const filterSensitiveLog: (obj: UpdateThingGroupsForThingResponse) => any;
}
export interface UpdateTopicRuleDestinationRequest {
    
    arn: string | undefined;
    
    status: TopicRuleDestinationStatus | string | undefined;
}
export declare namespace UpdateTopicRuleDestinationRequest {
    
    const filterSensitiveLog: (obj: UpdateTopicRuleDestinationRequest) => any;
}
export interface UpdateTopicRuleDestinationResponse {
}
export declare namespace UpdateTopicRuleDestinationResponse {
    
    const filterSensitiveLog: (obj: UpdateTopicRuleDestinationResponse) => any;
}
export interface ValidateSecurityProfileBehaviorsRequest {
    
    behaviors: Behavior[] | undefined;
}
export declare namespace ValidateSecurityProfileBehaviorsRequest {
    
    const filterSensitiveLog: (obj: ValidateSecurityProfileBehaviorsRequest) => any;
}

export interface ValidationError {
    
    errorMessage?: string;
}
export declare namespace ValidationError {
    
    const filterSensitiveLog: (obj: ValidationError) => any;
}
export interface ValidateSecurityProfileBehaviorsResponse {
    
    valid?: boolean;
    
    validationErrors?: ValidationError[];
}
export declare namespace ValidateSecurityProfileBehaviorsResponse {
    
    const filterSensitiveLog: (obj: ValidateSecurityProfileBehaviorsResponse) => any;
}
