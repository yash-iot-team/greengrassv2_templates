import { MetadataBearer as $MetadataBearer, SmithyException as __SmithyException } from "@aws-sdk/types";
export declare enum AbortAction {
    CANCEL = "CANCEL"
}
export declare enum JobExecutionFailureType {
    ALL = "ALL",
    FAILED = "FAILED",
    REJECTED = "REJECTED",
    TIMED_OUT = "TIMED_OUT"
}

export interface AbortCriteria {
    
    failureType: JobExecutionFailureType | string | undefined;
    
    action: AbortAction | string | undefined;
    
    thresholdPercentage: number | undefined;
    
    minNumberOfExecutedThings: number | undefined;
}
export declare namespace AbortCriteria {
    
    const filterSensitiveLog: (obj: AbortCriteria) => any;
}

export interface AbortConfig {
    
    criteriaList: AbortCriteria[] | undefined;
}
export declare namespace AbortConfig {
    
    const filterSensitiveLog: (obj: AbortConfig) => any;
}

export interface AcceptCertificateTransferRequest {
    
    certificateId: string | undefined;
    
    setAsActive?: boolean;
}
export declare namespace AcceptCertificateTransferRequest {
    
    const filterSensitiveLog: (obj: AcceptCertificateTransferRequest) => any;
}

export interface InternalFailureException extends __SmithyException, $MetadataBearer {
    name: "InternalFailureException";
    $fault: "server";
    
    message?: string;
}

export interface InvalidRequestException extends __SmithyException, $MetadataBearer {
    name: "InvalidRequestException";
    $fault: "client";
    
    message?: string;
}

export interface ResourceNotFoundException extends __SmithyException, $MetadataBearer {
    name: "ResourceNotFoundException";
    $fault: "client";
    
    message?: string;
}

export interface ServiceUnavailableException extends __SmithyException, $MetadataBearer {
    name: "ServiceUnavailableException";
    $fault: "server";
    
    message?: string;
}

export interface ThrottlingException extends __SmithyException, $MetadataBearer {
    name: "ThrottlingException";
    $fault: "client";
    
    message?: string;
}

export interface TransferAlreadyCompletedException extends __SmithyException, $MetadataBearer {
    name: "TransferAlreadyCompletedException";
    $fault: "client";
    
    message?: string;
}

export interface UnauthorizedException extends __SmithyException, $MetadataBearer {
    name: "UnauthorizedException";
    $fault: "client";
    
    message?: string;
}

export interface CloudwatchAlarmAction {
    
    roleArn: string | undefined;
    
    alarmName: string | undefined;
    
    stateReason: string | undefined;
    
    stateValue: string | undefined;
}
export declare namespace CloudwatchAlarmAction {
    
    const filterSensitiveLog: (obj: CloudwatchAlarmAction) => any;
}

export interface CloudwatchLogsAction {
    
    roleArn: string | undefined;
    
    logGroupName: string | undefined;
}
export declare namespace CloudwatchLogsAction {
    
    const filterSensitiveLog: (obj: CloudwatchLogsAction) => any;
}

export interface CloudwatchMetricAction {
    
    roleArn: string | undefined;
    
    metricNamespace: string | undefined;
    
    metricName: string | undefined;
    
    metricValue: string | undefined;
    
    metricUnit: string | undefined;
    
    metricTimestamp?: string;
}
export declare namespace CloudwatchMetricAction {
    
    const filterSensitiveLog: (obj: CloudwatchMetricAction) => any;
}
export declare enum DynamoKeyType {
    NUMBER = "NUMBER",
    STRING = "STRING"
}

export interface DynamoDBAction {
    
    tableName: string | undefined;
    
    roleArn: string | undefined;
    
    operation?: string;
    
    hashKeyField: string | undefined;
    
    hashKeyValue: string | undefined;
    
    hashKeyType?: DynamoKeyType | string;
    
    rangeKeyField?: string;
    
    rangeKeyValue?: string;
    
    rangeKeyType?: DynamoKeyType | string;
    
    payloadField?: string;
}
export declare namespace DynamoDBAction {
    
    const filterSensitiveLog: (obj: DynamoDBAction) => any;
}

export interface PutItemInput {
    
    tableName: string | undefined;
}
export declare namespace PutItemInput {
    
    const filterSensitiveLog: (obj: PutItemInput) => any;
}

export interface DynamoDBv2Action {
    
    roleArn: string | undefined;
    
    putItem: PutItemInput | undefined;
}
export declare namespace DynamoDBv2Action {
    
    const filterSensitiveLog: (obj: DynamoDBv2Action) => any;
}

export interface ElasticsearchAction {
    
    roleArn: string | undefined;
    
    endpoint: string | undefined;
    
    index: string | undefined;
    
    type: string | undefined;
    
    id: string | undefined;
}
export declare namespace ElasticsearchAction {
    
    const filterSensitiveLog: (obj: ElasticsearchAction) => any;
}

export interface FirehoseAction {
    
    roleArn: string | undefined;
    
    deliveryStreamName: string | undefined;
    
    separator?: string;
    
    batchMode?: boolean;
}
export declare namespace FirehoseAction {
    
    const filterSensitiveLog: (obj: FirehoseAction) => any;
}

export interface SigV4Authorization {
    
    signingRegion: string | undefined;
    
    serviceName: string | undefined;
    
    roleArn: string | undefined;
}
export declare namespace SigV4Authorization {
    
    const filterSensitiveLog: (obj: SigV4Authorization) => any;
}

export interface HttpAuthorization {
    
    sigv4?: SigV4Authorization;
}
export declare namespace HttpAuthorization {
    
    const filterSensitiveLog: (obj: HttpAuthorization) => any;
}

export interface HttpActionHeader {
    
    key: string | undefined;
    
    value: string | undefined;
}
export declare namespace HttpActionHeader {
    
    const filterSensitiveLog: (obj: HttpActionHeader) => any;
}

export interface HttpAction {
    
    url: string | undefined;
    
    confirmationUrl?: string;
    
    headers?: HttpActionHeader[];
    
    auth?: HttpAuthorization;
}
export declare namespace HttpAction {
    
    const filterSensitiveLog: (obj: HttpAction) => any;
}

export interface IotAnalyticsAction {
    
    channelArn?: string;
    
    channelName?: string;
    
    batchMode?: boolean;
    
    roleArn?: string;
}
export declare namespace IotAnalyticsAction {
    
    const filterSensitiveLog: (obj: IotAnalyticsAction) => any;
}

export interface IotEventsAction {
    
    inputName: string | undefined;
    
    messageId?: string;
    
    batchMode?: boolean;
    
    roleArn: string | undefined;
}
export declare namespace IotEventsAction {
    
    const filterSensitiveLog: (obj: IotEventsAction) => any;
}

export interface AssetPropertyTimestamp {
    
    timeInSeconds: string | undefined;
    
    offsetInNanos?: string;
}
export declare namespace AssetPropertyTimestamp {
    
    const filterSensitiveLog: (obj: AssetPropertyTimestamp) => any;
}

export declare type AssetPropertyVariant = AssetPropertyVariant.BooleanValueMember | AssetPropertyVariant.DoubleValueMember | AssetPropertyVariant.IntegerValueMember | AssetPropertyVariant.StringValueMember | AssetPropertyVariant.$UnknownMember;
export declare namespace AssetPropertyVariant {
    
    interface StringValueMember {
        stringValue: string;
        integerValue?: never;
        doubleValue?: never;
        booleanValue?: never;
        $unknown?: never;
    }
    
    interface IntegerValueMember {
        stringValue?: never;
        integerValue: string;
        doubleValue?: never;
        booleanValue?: never;
        $unknown?: never;
    }
    
    interface DoubleValueMember {
        stringValue?: never;
        integerValue?: never;
        doubleValue: string;
        booleanValue?: never;
        $unknown?: never;
    }
    
    interface BooleanValueMember {
        stringValue?: never;
        integerValue?: never;
        doubleValue?: never;
        booleanValue: string;
        $unknown?: never;
    }
    interface $UnknownMember {
        stringValue?: never;
        integerValue?: never;
        doubleValue?: never;
        booleanValue?: never;
        $unknown: [
            string,
            any
        ];
    }
    interface Visitor<T> {
        stringValue: (value: string) => T;
        integerValue: (value: string) => T;
        doubleValue: (value: string) => T;
        booleanValue: (value: string) => T;
        _: (name: string, value: any) => T;
    }
    const visit: <T>(value: AssetPropertyVariant, visitor: Visitor<T>) => T;
    
    const filterSensitiveLog: (obj: AssetPropertyVariant) => any;
}

export interface AssetPropertyValue {
    
    value: AssetPropertyVariant | undefined;
    
    timestamp: AssetPropertyTimestamp | undefined;
    
    quality?: string;
}
export declare namespace AssetPropertyValue {
    
    const filterSensitiveLog: (obj: AssetPropertyValue) => any;
}

export interface PutAssetPropertyValueEntry {
    
    entryId?: string;
    
    assetId?: string;
    
    propertyId?: string;
    
    propertyAlias?: string;
    
    propertyValues: AssetPropertyValue[] | undefined;
}
export declare namespace PutAssetPropertyValueEntry {
    
    const filterSensitiveLog: (obj: PutAssetPropertyValueEntry) => any;
}

export interface IotSiteWiseAction {
    
    putAssetPropertyValueEntries: PutAssetPropertyValueEntry[] | undefined;
    
    roleArn: string | undefined;
}
export declare namespace IotSiteWiseAction {
    
    const filterSensitiveLog: (obj: IotSiteWiseAction) => any;
}

export interface KafkaAction {
    
    destinationArn: string | undefined;
    
    topic: string | undefined;
    
    key?: string;
    
    partition?: string;
    
    clientProperties: {
        [key: string]: string;
    } | undefined;
}
export declare namespace KafkaAction {
    
    const filterSensitiveLog: (obj: KafkaAction) => any;
}

export interface KinesisAction {
    
    roleArn: string | undefined;
    
    streamName: string | undefined;
    
    partitionKey?: string;
}
export declare namespace KinesisAction {
    
    const filterSensitiveLog: (obj: KinesisAction) => any;
}

export interface LambdaAction {
    
    functionArn: string | undefined;
}
export declare namespace LambdaAction {
    
    const filterSensitiveLog: (obj: LambdaAction) => any;
}

export interface OpenSearchAction {
    
    roleArn: string | undefined;
    
    endpoint: string | undefined;
    
    index: string | undefined;
    
    type: string | undefined;
    
    id: string | undefined;
}
export declare namespace OpenSearchAction {
    
    const filterSensitiveLog: (obj: OpenSearchAction) => any;
}

export interface RepublishAction {
    
    roleArn: string | undefined;
    
    topic: string | undefined;
    
    qos?: number;
}
export declare namespace RepublishAction {
    
    const filterSensitiveLog: (obj: RepublishAction) => any;
}
export declare enum CannedAccessControlList {
    AuthenticatedRead = "authenticated-read",
    AwsExecRead = "aws-exec-read",
    BucketOwnerFullControl = "bucket-owner-full-control",
    BucketOwnerRead = "bucket-owner-read",
    LogDeliveryWrite = "log-delivery-write",
    Private = "private",
    PublicRead = "public-read",
    PublicReadWrite = "public-read-write"
}

export interface S3Action {
    
    roleArn: string | undefined;
    
    bucketName: string | undefined;
    
    key: string | undefined;
    
    cannedAcl?: CannedAccessControlList | string;
}
export declare namespace S3Action {
    
    const filterSensitiveLog: (obj: S3Action) => any;
}

export interface SalesforceAction {
    
    token: string | undefined;
    
    url: string | undefined;
}
export declare namespace SalesforceAction {
    
    const filterSensitiveLog: (obj: SalesforceAction) => any;
}
export declare enum MessageFormat {
    JSON = "JSON",
    RAW = "RAW"
}

export interface SnsAction {
    
    targetArn: string | undefined;
    
    roleArn: string | undefined;
    
    messageFormat?: MessageFormat | string;
}
export declare namespace SnsAction {
    
    const filterSensitiveLog: (obj: SnsAction) => any;
}

export interface SqsAction {
    
    roleArn: string | undefined;
    
    queueUrl: string | undefined;
    
    useBase64?: boolean;
}
export declare namespace SqsAction {
    
    const filterSensitiveLog: (obj: SqsAction) => any;
}

export interface StepFunctionsAction {
    
    executionNamePrefix?: string;
    
    stateMachineName: string | undefined;
    
    roleArn: string | undefined;
}
export declare namespace StepFunctionsAction {
    
    const filterSensitiveLog: (obj: StepFunctionsAction) => any;
}

export interface TimestreamDimension {
    
    name: string | undefined;
    
    value: string | undefined;
}
export declare namespace TimestreamDimension {
    
    const filterSensitiveLog: (obj: TimestreamDimension) => any;
}

export interface TimestreamTimestamp {
    
    value: string | undefined;
    
    unit: string | undefined;
}
export declare namespace TimestreamTimestamp {
    
    const filterSensitiveLog: (obj: TimestreamTimestamp) => any;
}

export interface TimestreamAction {
    
    roleArn: string | undefined;
    
    databaseName: string | undefined;
    
    tableName: string | undefined;
    
    dimensions: TimestreamDimension[] | undefined;
    
    timestamp?: TimestreamTimestamp;
}
export declare namespace TimestreamAction {
    
    const filterSensitiveLog: (obj: TimestreamAction) => any;
}

export interface Action {
    
    dynamoDB?: DynamoDBAction;
    
    dynamoDBv2?: DynamoDBv2Action;
    
    lambda?: LambdaAction;
    
    sns?: SnsAction;
    
    sqs?: SqsAction;
    
    kinesis?: KinesisAction;
    
    republish?: RepublishAction;
    
    s3?: S3Action;
    
    firehose?: FirehoseAction;
    
    cloudwatchMetric?: CloudwatchMetricAction;
    
    cloudwatchAlarm?: CloudwatchAlarmAction;
    
    cloudwatchLogs?: CloudwatchLogsAction;
    
    elasticsearch?: ElasticsearchAction;
    
    salesforce?: SalesforceAction;
    
    iotAnalytics?: IotAnalyticsAction;
    
    iotEvents?: IotEventsAction;
    
    iotSiteWise?: IotSiteWiseAction;
    
    stepFunctions?: StepFunctionsAction;
    
    timestream?: TimestreamAction;
    
    http?: HttpAction;
    
    kafka?: KafkaAction;
    
    openSearch?: OpenSearchAction;
}
export declare namespace Action {
    
    const filterSensitiveLog: (obj: Action) => any;
}
export declare enum ActionType {
    CONNECT = "CONNECT",
    PUBLISH = "PUBLISH",
    RECEIVE = "RECEIVE",
    SUBSCRIBE = "SUBSCRIBE"
}
export declare enum ComparisonOperator {
    GREATER_THAN = "greater-than",
    GREATER_THAN_EQUALS = "greater-than-equals",
    IN_CIDR_SET = "in-cidr-set",
    IN_PORT_SET = "in-port-set",
    IN_SET = "in-set",
    LESS_THAN = "less-than",
    LESS_THAN_EQUALS = "less-than-equals",
    NOT_IN_CIDR_SET = "not-in-cidr-set",
    NOT_IN_PORT_SET = "not-in-port-set",
    NOT_IN_SET = "not-in-set"
}
export declare enum ConfidenceLevel {
    HIGH = "HIGH",
    LOW = "LOW",
    MEDIUM = "MEDIUM"
}

export interface MachineLearningDetectionConfig {
    
    confidenceLevel: ConfidenceLevel | string | undefined;
}
export declare namespace MachineLearningDetectionConfig {
    
    const filterSensitiveLog: (obj: MachineLearningDetectionConfig) => any;
}

export interface StatisticalThreshold {
    
    statistic?: string;
}
export declare namespace StatisticalThreshold {
    
    const filterSensitiveLog: (obj: StatisticalThreshold) => any;
}

export interface MetricValue {
    
    count?: number;
    
    cidrs?: string[];
    
    ports?: number[];
    
    number?: number;
    
    numbers?: number[];
    
    strings?: string[];
}
export declare namespace MetricValue {
    
    const filterSensitiveLog: (obj: MetricValue) => any;
}

export interface BehaviorCriteria {
    
    comparisonOperator?: ComparisonOperator | string;
    
    value?: MetricValue;
    
    durationSeconds?: number;
    
    consecutiveDatapointsToAlarm?: number;
    
    consecutiveDatapointsToClear?: number;
    
    statisticalThreshold?: StatisticalThreshold;
    
    mlDetectionConfig?: MachineLearningDetectionConfig;
}
export declare namespace BehaviorCriteria {
    
    const filterSensitiveLog: (obj: BehaviorCriteria) => any;
}
export declare enum DimensionValueOperator {
    IN = "IN",
    NOT_IN = "NOT_IN"
}

export interface MetricDimension {
    
    dimensionName: string | undefined;
    
    operator?: DimensionValueOperator | string;
}
export declare namespace MetricDimension {
    
    const filterSensitiveLog: (obj: MetricDimension) => any;
}

export interface Behavior {
    
    name: string | undefined;
    
    metric?: string;
    
    metricDimension?: MetricDimension;
    
    criteria?: BehaviorCriteria;
    
    suppressAlerts?: boolean;
}
export declare namespace Behavior {
    
    const filterSensitiveLog: (obj: Behavior) => any;
}
export declare enum VerificationState {
    BENIGN_POSITIVE = "BENIGN_POSITIVE",
    FALSE_POSITIVE = "FALSE_POSITIVE",
    TRUE_POSITIVE = "TRUE_POSITIVE",
    UNKNOWN = "UNKNOWN"
}

export interface ViolationEventAdditionalInfo {
    
    confidenceLevel?: ConfidenceLevel | string;
}
export declare namespace ViolationEventAdditionalInfo {
    
    const filterSensitiveLog: (obj: ViolationEventAdditionalInfo) => any;
}

export interface ActiveViolation {
    
    violationId?: string;
    
    thingName?: string;
    
    securityProfileName?: string;
    
    behavior?: Behavior;
    
    lastViolationValue?: MetricValue;
    
    violationEventAdditionalInfo?: ViolationEventAdditionalInfo;
    
    verificationState?: VerificationState | string;
    
    verificationStateDescription?: string;
    
    lastViolationTime?: Date;
    
    violationStartTime?: Date;
}
export declare namespace ActiveViolation {
    
    const filterSensitiveLog: (obj: ActiveViolation) => any;
}

export interface MetricToRetain {
    
    metric: string | undefined;
    
    metricDimension?: MetricDimension;
}
export declare namespace MetricToRetain {
    
    const filterSensitiveLog: (obj: MetricToRetain) => any;
}

export interface AddThingsToThingGroupParams {
    
    thingGroupNames: string[] | undefined;
    
    overrideDynamicGroups?: boolean;
}
export declare namespace AddThingsToThingGroupParams {
    
    const filterSensitiveLog: (obj: AddThingsToThingGroupParams) => any;
}
export interface AddThingToBillingGroupRequest {
    
    billingGroupName?: string;
    
    billingGroupArn?: string;
    
    thingName?: string;
    
    thingArn?: string;
}
export declare namespace AddThingToBillingGroupRequest {
    
    const filterSensitiveLog: (obj: AddThingToBillingGroupRequest) => any;
}
export interface AddThingToBillingGroupResponse {
}
export declare namespace AddThingToBillingGroupResponse {
    
    const filterSensitiveLog: (obj: AddThingToBillingGroupResponse) => any;
}
export interface AddThingToThingGroupRequest {
    
    thingGroupName?: string;
    
    thingGroupArn?: string;
    
    thingName?: string;
    
    thingArn?: string;
    
    overrideDynamicGroups?: boolean;
}
export declare namespace AddThingToThingGroupRequest {
    
    const filterSensitiveLog: (obj: AddThingToThingGroupRequest) => any;
}
export interface AddThingToThingGroupResponse {
}
export declare namespace AddThingToThingGroupResponse {
    
    const filterSensitiveLog: (obj: AddThingToThingGroupResponse) => any;
}
export declare enum AggregationTypeName {
    CARDINALITY = "Cardinality",
    PERCENTILES = "Percentiles",
    STATISTICS = "Statistics"
}

export interface AggregationType {
    
    name: AggregationTypeName | string | undefined;
    
    values?: string[];
}
export declare namespace AggregationType {
    
    const filterSensitiveLog: (obj: AggregationType) => any;
}

export interface AlertTarget {
    
    alertTargetArn: string | undefined;
    
    roleArn: string | undefined;
}
export declare namespace AlertTarget {
    
    const filterSensitiveLog: (obj: AlertTarget) => any;
}
export declare enum AlertTargetType {
    SNS = "SNS"
}

export interface Policy {
    
    policyName?: string;
    
    policyArn?: string;
}
export declare namespace Policy {
    
    const filterSensitiveLog: (obj: Policy) => any;
}

export interface Allowed {
    
    policies?: Policy[];
}
export declare namespace Allowed {
    
    const filterSensitiveLog: (obj: Allowed) => any;
}
export interface AssociateTargetsWithJobRequest {
    
    targets: string[] | undefined;
    
    jobId: string | undefined;
    
    comment?: string;
    
    namespaceId?: string;
}
export declare namespace AssociateTargetsWithJobRequest {
    
    const filterSensitiveLog: (obj: AssociateTargetsWithJobRequest) => any;
}
export interface AssociateTargetsWithJobResponse {
    
    jobArn?: string;
    
    jobId?: string;
    
    description?: string;
}
export declare namespace AssociateTargetsWithJobResponse {
    
    const filterSensitiveLog: (obj: AssociateTargetsWithJobResponse) => any;
}

export interface LimitExceededException extends __SmithyException, $MetadataBearer {
    name: "LimitExceededException";
    $fault: "client";
    
    message?: string;
}
export interface AttachPolicyRequest {
    
    policyName: string | undefined;
    
    target: string | undefined;
}
export declare namespace AttachPolicyRequest {
    
    const filterSensitiveLog: (obj: AttachPolicyRequest) => any;
}

export interface AttachPrincipalPolicyRequest {
    
    policyName: string | undefined;
    
    principal: string | undefined;
}
export declare namespace AttachPrincipalPolicyRequest {
    
    const filterSensitiveLog: (obj: AttachPrincipalPolicyRequest) => any;
}
export interface AttachSecurityProfileRequest {
    
    securityProfileName: string | undefined;
    
    securityProfileTargetArn: string | undefined;
}
export declare namespace AttachSecurityProfileRequest {
    
    const filterSensitiveLog: (obj: AttachSecurityProfileRequest) => any;
}
export interface AttachSecurityProfileResponse {
}
export declare namespace AttachSecurityProfileResponse {
    
    const filterSensitiveLog: (obj: AttachSecurityProfileResponse) => any;
}

export interface VersionConflictException extends __SmithyException, $MetadataBearer {
    name: "VersionConflictException";
    $fault: "client";
    
    message?: string;
}

export interface AttachThingPrincipalRequest {
    
    thingName: string | undefined;
    
    principal: string | undefined;
}
export declare namespace AttachThingPrincipalRequest {
    
    const filterSensitiveLog: (obj: AttachThingPrincipalRequest) => any;
}

export interface AttachThingPrincipalResponse {
}
export declare namespace AttachThingPrincipalResponse {
    
    const filterSensitiveLog: (obj: AttachThingPrincipalResponse) => any;
}

export interface AttributePayload {
    
    attributes?: {
        [key: string]: string;
    };
    
    merge?: boolean;
}
export declare namespace AttributePayload {
    
    const filterSensitiveLog: (obj: AttributePayload) => any;
}

export interface AuditCheckConfiguration {
    
    enabled?: boolean;
}
export declare namespace AuditCheckConfiguration {
    
    const filterSensitiveLog: (obj: AuditCheckConfiguration) => any;
}
export declare enum AuditCheckRunStatus {
    CANCELED = "CANCELED",
    COMPLETED_COMPLIANT = "COMPLETED_COMPLIANT",
    COMPLETED_NON_COMPLIANT = "COMPLETED_NON_COMPLIANT",
    FAILED = "FAILED",
    IN_PROGRESS = "IN_PROGRESS",
    WAITING_FOR_DATA_COLLECTION = "WAITING_FOR_DATA_COLLECTION"
}

export interface AuditCheckDetails {
    
    checkRunStatus?: AuditCheckRunStatus | string;
    
    checkCompliant?: boolean;
    
    totalResourcesCount?: number;
    
    nonCompliantResourcesCount?: number;
    
    suppressedNonCompliantResourcesCount?: number;
    
    errorCode?: string;
    
    message?: string;
}
export declare namespace AuditCheckDetails {
    
    const filterSensitiveLog: (obj: AuditCheckDetails) => any;
}

export interface PolicyVersionIdentifier {
    
    policyName?: string;
    
    policyVersionId?: string;
}
export declare namespace PolicyVersionIdentifier {
    
    const filterSensitiveLog: (obj: PolicyVersionIdentifier) => any;
}

export interface ResourceIdentifier {
    
    deviceCertificateId?: string;
    
    caCertificateId?: string;
    
    cognitoIdentityPoolId?: string;
    
    clientId?: string;
    
    policyVersionIdentifier?: PolicyVersionIdentifier;
    
    account?: string;
    
    iamRoleArn?: string;
    
    roleAliasArn?: string;
}
export declare namespace ResourceIdentifier {
    
    const filterSensitiveLog: (obj: ResourceIdentifier) => any;
}
export declare enum ResourceType {
    ACCOUNT_SETTINGS = "ACCOUNT_SETTINGS",
    CA_CERTIFICATE = "CA_CERTIFICATE",
    CLIENT_ID = "CLIENT_ID",
    COGNITO_IDENTITY_POOL = "COGNITO_IDENTITY_POOL",
    DEVICE_CERTIFICATE = "DEVICE_CERTIFICATE",
    IAM_ROLE = "IAM_ROLE",
    IOT_POLICY = "IOT_POLICY",
    ROLE_ALIAS = "ROLE_ALIAS"
}

export interface NonCompliantResource {
    
    resourceType?: ResourceType | string;
    
    resourceIdentifier?: ResourceIdentifier;
    
    additionalInfo?: {
        [key: string]: string;
    };
}
export declare namespace NonCompliantResource {
    
    const filterSensitiveLog: (obj: NonCompliantResource) => any;
}

export interface RelatedResource {
    
    resourceType?: ResourceType | string;
    
    resourceIdentifier?: ResourceIdentifier;
    
    additionalInfo?: {
        [key: string]: string;
    };
}
export declare namespace RelatedResource {
    
    const filterSensitiveLog: (obj: RelatedResource) => any;
}
export declare enum AuditFindingSeverity {
    CRITICAL = "CRITICAL",
    HIGH = "HIGH",
    LOW = "LOW",
    MEDIUM = "MEDIUM"
}

export interface AuditFinding {
    
    findingId?: string;
    
    taskId?: string;
    
    checkName?: string;
    
    taskStartTime?: Date;
    
    findingTime?: Date;
    
    severity?: AuditFindingSeverity | string;
    
    nonCompliantResource?: NonCompliantResource;
    
    relatedResources?: RelatedResource[];
    
    reasonForNonCompliance?: string;
    
    reasonForNonComplianceCode?: string;
    
    isSuppressed?: boolean;
}
export declare namespace AuditFinding {
    
    const filterSensitiveLog: (obj: AuditFinding) => any;
}
export declare enum AuditFrequency {
    BIWEEKLY = "BIWEEKLY",
    DAILY = "DAILY",
    MONTHLY = "MONTHLY",
    WEEKLY = "WEEKLY"
}
export declare enum AuditMitigationActionsExecutionStatus {
    CANCELED = "CANCELED",
    COMPLETED = "COMPLETED",
    FAILED = "FAILED",
    IN_PROGRESS = "IN_PROGRESS",
    PENDING = "PENDING",
    SKIPPED = "SKIPPED"
}

export interface AuditMitigationActionExecutionMetadata {
    
    taskId?: string;
    
    findingId?: string;
    
    actionName?: string;
    
    actionId?: string;
    
    status?: AuditMitigationActionsExecutionStatus | string;
    
    startTime?: Date;
    
    endTime?: Date;
    
    errorCode?: string;
    
    message?: string;
}
export declare namespace AuditMitigationActionExecutionMetadata {
    
    const filterSensitiveLog: (obj: AuditMitigationActionExecutionMetadata) => any;
}
export declare enum AuditMitigationActionsTaskStatus {
    CANCELED = "CANCELED",
    COMPLETED = "COMPLETED",
    FAILED = "FAILED",
    IN_PROGRESS = "IN_PROGRESS"
}

export interface AuditMitigationActionsTaskMetadata {
    
    taskId?: string;
    
    startTime?: Date;
    
    taskStatus?: AuditMitigationActionsTaskStatus | string;
}
export declare namespace AuditMitigationActionsTaskMetadata {
    
    const filterSensitiveLog: (obj: AuditMitigationActionsTaskMetadata) => any;
}

export interface TaskStatisticsForAuditCheck {
    
    totalFindingsCount?: number;
    
    failedFindingsCount?: number;
    
    succeededFindingsCount?: number;
    
    skippedFindingsCount?: number;
    
    canceledFindingsCount?: number;
}
export declare namespace TaskStatisticsForAuditCheck {
    
    const filterSensitiveLog: (obj: TaskStatisticsForAuditCheck) => any;
}

export interface AuditMitigationActionsTaskTarget {
    
    auditTaskId?: string;
    
    findingIds?: string[];
    
    auditCheckToReasonCodeFilter?: {
        [key: string]: string[];
    };
}
export declare namespace AuditMitigationActionsTaskTarget {
    
    const filterSensitiveLog: (obj: AuditMitigationActionsTaskTarget) => any;
}

export interface AuditNotificationTarget {
    
    targetArn?: string;
    
    roleArn?: string;
    
    enabled?: boolean;
}
export declare namespace AuditNotificationTarget {
    
    const filterSensitiveLog: (obj: AuditNotificationTarget) => any;
}
export declare enum AuditNotificationType {
    SNS = "SNS"
}

export interface AuditSuppression {
    
    checkName: string | undefined;
    
    resourceIdentifier: ResourceIdentifier | undefined;
    
    expirationDate?: Date;
    
    suppressIndefinitely?: boolean;
    
    description?: string;
}
export declare namespace AuditSuppression {
    
    const filterSensitiveLog: (obj: AuditSuppression) => any;
}
export declare enum AuditTaskStatus {
    CANCELED = "CANCELED",
    COMPLETED = "COMPLETED",
    FAILED = "FAILED",
    IN_PROGRESS = "IN_PROGRESS"
}
export declare enum AuditTaskType {
    ON_DEMAND_AUDIT_TASK = "ON_DEMAND_AUDIT_TASK",
    SCHEDULED_AUDIT_TASK = "SCHEDULED_AUDIT_TASK"
}

export interface AuditTaskMetadata {
    
    taskId?: string;
    
    taskStatus?: AuditTaskStatus | string;
    
    taskType?: AuditTaskType | string;
}
export declare namespace AuditTaskMetadata {
    
    const filterSensitiveLog: (obj: AuditTaskMetadata) => any;
}
export declare enum AuthDecision {
    ALLOWED = "ALLOWED",
    EXPLICIT_DENY = "EXPLICIT_DENY",
    IMPLICIT_DENY = "IMPLICIT_DENY"
}

export interface AuthInfo {
    
    actionType?: ActionType | string;
    
    resources: string[] | undefined;
}
export declare namespace AuthInfo {
    
    const filterSensitiveLog: (obj: AuthInfo) => any;
}

export interface AuthorizerConfig {
    
    defaultAuthorizerName?: string;
    
    allowAuthorizerOverride?: boolean;
}
export declare namespace AuthorizerConfig {
    
    const filterSensitiveLog: (obj: AuthorizerConfig) => any;
}
export declare enum AuthorizerStatus {
    ACTIVE = "ACTIVE",
    INACTIVE = "INACTIVE"
}

export interface AuthorizerDescription {
    
    authorizerName?: string;
    
    authorizerArn?: string;
    
    authorizerFunctionArn?: string;
    
    tokenKeyName?: string;
    
    tokenSigningPublicKeys?: {
        [key: string]: string;
    };
    
    status?: AuthorizerStatus | string;
    
    creationDate?: Date;
    
    lastModifiedDate?: Date;
    
    signingDisabled?: boolean;
    
    enableCachingForHttp?: boolean;
}
export declare namespace AuthorizerDescription {
    
    const filterSensitiveLog: (obj: AuthorizerDescription) => any;
}

export interface AuthorizerSummary {
    
    authorizerName?: string;
    
    authorizerArn?: string;
}
export declare namespace AuthorizerSummary {
    
    const filterSensitiveLog: (obj: AuthorizerSummary) => any;
}

export interface ExplicitDeny {
    
    policies?: Policy[];
}
export declare namespace ExplicitDeny {
    
    const filterSensitiveLog: (obj: ExplicitDeny) => any;
}

export interface ImplicitDeny {
    
    policies?: Policy[];
}
export declare namespace ImplicitDeny {
    
    const filterSensitiveLog: (obj: ImplicitDeny) => any;
}

export interface Denied {
    
    implicitDeny?: ImplicitDeny;
    
    explicitDeny?: ExplicitDeny;
}
export declare namespace Denied {
    
    const filterSensitiveLog: (obj: Denied) => any;
}

export interface AuthResult {
    
    authInfo?: AuthInfo;
    
    allowed?: Allowed;
    
    denied?: Denied;
    
    authDecision?: AuthDecision | string;
    
    missingContextValues?: string[];
}
export declare namespace AuthResult {
    
    const filterSensitiveLog: (obj: AuthResult) => any;
}
export declare enum AutoRegistrationStatus {
    DISABLE = "DISABLE",
    ENABLE = "ENABLE"
}
export interface CancelAuditMitigationActionsTaskRequest {
    
    taskId: string | undefined;
}
export declare namespace CancelAuditMitigationActionsTaskRequest {
    
    const filterSensitiveLog: (obj: CancelAuditMitigationActionsTaskRequest) => any;
}
export interface CancelAuditMitigationActionsTaskResponse {
}
export declare namespace CancelAuditMitigationActionsTaskResponse {
    
    const filterSensitiveLog: (obj: CancelAuditMitigationActionsTaskResponse) => any;
}
export interface CancelAuditTaskRequest {
    
    taskId: string | undefined;
}
export declare namespace CancelAuditTaskRequest {
    
    const filterSensitiveLog: (obj: CancelAuditTaskRequest) => any;
}
export interface CancelAuditTaskResponse {
}
export declare namespace CancelAuditTaskResponse {
    
    const filterSensitiveLog: (obj: CancelAuditTaskResponse) => any;
}

export interface CancelCertificateTransferRequest {
    
    certificateId: string | undefined;
}
export declare namespace CancelCertificateTransferRequest {
    
    const filterSensitiveLog: (obj: CancelCertificateTransferRequest) => any;
}
export interface CancelDetectMitigationActionsTaskRequest {
    
    taskId: string | undefined;
}
export declare namespace CancelDetectMitigationActionsTaskRequest {
    
    const filterSensitiveLog: (obj: CancelDetectMitigationActionsTaskRequest) => any;
}
export interface CancelDetectMitigationActionsTaskResponse {
}
export declare namespace CancelDetectMitigationActionsTaskResponse {
    
    const filterSensitiveLog: (obj: CancelDetectMitigationActionsTaskResponse) => any;
}
export interface CancelJobRequest {
    
    jobId: string | undefined;
    
    reasonCode?: string;
    
    comment?: string;
    
    force?: boolean;
}
export declare namespace CancelJobRequest {
    
    const filterSensitiveLog: (obj: CancelJobRequest) => any;
}
export interface CancelJobResponse {
    
    jobArn?: string;
    
    jobId?: string;
    
    description?: string;
}
export declare namespace CancelJobResponse {
    
    const filterSensitiveLog: (obj: CancelJobResponse) => any;
}
export interface CancelJobExecutionRequest {
    
    jobId: string | undefined;
    
    thingName: string | undefined;
    
    force?: boolean;
    
    expectedVersion?: number;
    
    statusDetails?: {
        [key: string]: string;
    };
}
export declare namespace CancelJobExecutionRequest {
    
    const filterSensitiveLog: (obj: CancelJobExecutionRequest) => any;
}

export interface InvalidStateTransitionException extends __SmithyException, $MetadataBearer {
    name: "InvalidStateTransitionException";
    $fault: "client";
    
    message?: string;
}
export interface ClearDefaultAuthorizerRequest {
}
export declare namespace ClearDefaultAuthorizerRequest {
    
    const filterSensitiveLog: (obj: ClearDefaultAuthorizerRequest) => any;
}
export interface ClearDefaultAuthorizerResponse {
}
export declare namespace ClearDefaultAuthorizerResponse {
    
    const filterSensitiveLog: (obj: ClearDefaultAuthorizerResponse) => any;
}
export interface ConfirmTopicRuleDestinationRequest {
    
    confirmationToken: string | undefined;
}
export declare namespace ConfirmTopicRuleDestinationRequest {
    
    const filterSensitiveLog: (obj: ConfirmTopicRuleDestinationRequest) => any;
}
export interface ConfirmTopicRuleDestinationResponse {
}
export declare namespace ConfirmTopicRuleDestinationResponse {
    
    const filterSensitiveLog: (obj: ConfirmTopicRuleDestinationResponse) => any;
}

export interface ConflictingResourceUpdateException extends __SmithyException, $MetadataBearer {
    name: "ConflictingResourceUpdateException";
    $fault: "client";
    
    message?: string;
}

export interface InternalException extends __SmithyException, $MetadataBearer {
    name: "InternalException";
    $fault: "server";
    
    message?: string;
}
export interface CreateAuditSuppressionRequest {
    
    checkName: string | undefined;
    
    resourceIdentifier: ResourceIdentifier | undefined;
    
    expirationDate?: Date;
    
    suppressIndefinitely?: boolean;
    
    description?: string;
    
    clientRequestToken?: string;
}
export declare namespace CreateAuditSuppressionRequest {
    
    const filterSensitiveLog: (obj: CreateAuditSuppressionRequest) => any;
}
export interface CreateAuditSuppressionResponse {
}
export declare namespace CreateAuditSuppressionResponse {
    
    const filterSensitiveLog: (obj: CreateAuditSuppressionResponse) => any;
}

export interface ResourceAlreadyExistsException extends __SmithyException, $MetadataBearer {
    name: "ResourceAlreadyExistsException";
    $fault: "client";
    
    message?: string;
    
    resourceId?: string;
    
    resourceArn?: string;
}

export interface Tag {
    
    Key: string | undefined;
    
    Value?: string;
}
export declare namespace Tag {
    
    const filterSensitiveLog: (obj: Tag) => any;
}
export interface CreateAuthorizerRequest {
    
    authorizerName: string | undefined;
    
    authorizerFunctionArn: string | undefined;
    
    tokenKeyName?: string;
    
    tokenSigningPublicKeys?: {
        [key: string]: string;
    };
    
    status?: AuthorizerStatus | string;
    
    tags?: Tag[];
    
    signingDisabled?: boolean;
    
    enableCachingForHttp?: boolean;
}
export declare namespace CreateAuthorizerRequest {
    
    const filterSensitiveLog: (obj: CreateAuthorizerRequest) => any;
}
export interface CreateAuthorizerResponse {
    
    authorizerName?: string;
    
    authorizerArn?: string;
}
export declare namespace CreateAuthorizerResponse {
    
    const filterSensitiveLog: (obj: CreateAuthorizerResponse) => any;
}

export interface BillingGroupProperties {
    
    billingGroupDescription?: string;
}
export declare namespace BillingGroupProperties {
    
    const filterSensitiveLog: (obj: BillingGroupProperties) => any;
}
export interface CreateBillingGroupRequest {
    
    billingGroupName: string | undefined;
    
    billingGroupProperties?: BillingGroupProperties;
    
    tags?: Tag[];
}
export declare namespace CreateBillingGroupRequest {
    
    const filterSensitiveLog: (obj: CreateBillingGroupRequest) => any;
}
export interface CreateBillingGroupResponse {
    
    billingGroupName?: string;
    
    billingGroupArn?: string;
    
    billingGroupId?: string;
}
export declare namespace CreateBillingGroupResponse {
    
    const filterSensitiveLog: (obj: CreateBillingGroupResponse) => any;
}

export interface CreateCertificateFromCsrRequest {
    
    certificateSigningRequest: string | undefined;
    
    setAsActive?: boolean;
}
export declare namespace CreateCertificateFromCsrRequest {
    
    const filterSensitiveLog: (obj: CreateCertificateFromCsrRequest) => any;
}

export interface CreateCertificateFromCsrResponse {
    
    certificateArn?: string;
    
    certificateId?: string;
    
    certificatePem?: string;
}
export declare namespace CreateCertificateFromCsrResponse {
    
    const filterSensitiveLog: (obj: CreateCertificateFromCsrResponse) => any;
}
export declare enum CustomMetricType {
    IP_ADDRESS_LIST = "ip-address-list",
    NUMBER = "number",
    NUMBER_LIST = "number-list",
    STRING_LIST = "string-list"
}
export interface CreateCustomMetricRequest {
    
    metricName: string | undefined;
    
    displayName?: string;
    
    metricType: CustomMetricType | string | undefined;
    
    tags?: Tag[];
    
    clientRequestToken?: string;
}
export declare namespace CreateCustomMetricRequest {
    
    const filterSensitiveLog: (obj: CreateCustomMetricRequest) => any;
}
export interface CreateCustomMetricResponse {
    
    metricName?: string;
    
    metricArn?: string;
}
export declare namespace CreateCustomMetricResponse {
    
    const filterSensitiveLog: (obj: CreateCustomMetricResponse) => any;
}
export declare enum DimensionType {
    TOPIC_FILTER = "TOPIC_FILTER"
}
export interface CreateDimensionRequest {
    
    name: string | undefined;
    
    type: DimensionType | string | undefined;
    
    stringValues: string[] | undefined;
    
    tags?: Tag[];
    
    clientRequestToken?: string;
}
export declare namespace CreateDimensionRequest {
    
    const filterSensitiveLog: (obj: CreateDimensionRequest) => any;
}
export interface CreateDimensionResponse {
    
    name?: string;
    
    arn?: string;
}
export declare namespace CreateDimensionResponse {
    
    const filterSensitiveLog: (obj: CreateDimensionResponse) => any;
}

export interface CertificateValidationException extends __SmithyException, $MetadataBearer {
    name: "CertificateValidationException";
    $fault: "client";
    
    message?: string;
}
export declare enum ServiceType {
    CREDENTIAL_PROVIDER = "CREDENTIAL_PROVIDER",
    DATA = "DATA",
    JOBS = "JOBS"
}
export interface CreateDomainConfigurationRequest {
    
    domainConfigurationName: string | undefined;
    
    domainName?: string;
    
    serverCertificateArns?: string[];
    
    validationCertificateArn?: string;
    
    authorizerConfig?: AuthorizerConfig;
    
    serviceType?: ServiceType | string;
    
    tags?: Tag[];
}
export declare namespace CreateDomainConfigurationRequest {
    
    const filterSensitiveLog: (obj: CreateDomainConfigurationRequest) => any;
}
export interface CreateDomainConfigurationResponse {
    
    domainConfigurationName?: string;
    
    domainConfigurationArn?: string;
}
export declare namespace CreateDomainConfigurationResponse {
    
    const filterSensitiveLog: (obj: CreateDomainConfigurationResponse) => any;
}

export interface ThingGroupProperties {
    
    thingGroupDescription?: string;
    
    attributePayload?: AttributePayload;
}
export declare namespace ThingGroupProperties {
    
    const filterSensitiveLog: (obj: ThingGroupProperties) => any;
}
export interface CreateDynamicThingGroupRequest {
    
    thingGroupName: string | undefined;
    
    thingGroupProperties?: ThingGroupProperties;
    
    indexName?: string;
    
    queryString: string | undefined;
    
    queryVersion?: string;
    
    tags?: Tag[];
}
export declare namespace CreateDynamicThingGroupRequest {
    
    const filterSensitiveLog: (obj: CreateDynamicThingGroupRequest) => any;
}
export interface CreateDynamicThingGroupResponse {
    
    thingGroupName?: string;
    
    thingGroupArn?: string;
    
    thingGroupId?: string;
    
    indexName?: string;
    
    queryString?: string;
    
    queryVersion?: string;
}
export declare namespace CreateDynamicThingGroupResponse {
    
    const filterSensitiveLog: (obj: CreateDynamicThingGroupResponse) => any;
}

export interface InvalidQueryException extends __SmithyException, $MetadataBearer {
    name: "InvalidQueryException";
    $fault: "client";
    
    message?: string;
}
export declare enum FleetMetricUnit {
    Bits = "Bits",
    BitsSecond = "Bits/Second",
    Bytes = "Bytes",
    BytesSecond = "Bytes/Second",
    Count = "Count",
    CountSecond = "Count/Second",
    Gigabits = "Gigabits",
    GigabitsSecond = "Gigabits/Second",
    Gigabytes = "Gigabytes",
    GigabytesSecond = "Gigabytes/Second",
    Kilobits = "Kilobits",
    KilobitsSecond = "Kilobits/Second",
    Kilobytes = "Kilobytes",
    KilobytesSecond = "Kilobytes/Second",
    Megabits = "Megabits",
    MegabitsSecond = "Megabits/Second",
    Megabytes = "Megabytes",
    MegabytesSecond = "Megabytes/Second",
    Microseconds = "Microseconds",
    Milliseconds = "Milliseconds",
    None = "None",
    Percent = "Percent",
    Seconds = "Seconds",
    Terabits = "Terabits",
    TerabitsSecond = "Terabits/Second",
    Terabytes = "Terabytes",
    TerabytesSecond = "Terabytes/Second"
}
export interface CreateFleetMetricRequest {
    
    metricName: string | undefined;
    
    queryString: string | undefined;
    
    aggregationType: AggregationType | undefined;
    
    period: number | undefined;
    
    aggregationField: string | undefined;
    
    description?: string;
    
    queryVersion?: string;
    
    indexName?: string;
    
    unit?: FleetMetricUnit | string;
    
    tags?: Tag[];
}
export declare namespace CreateFleetMetricRequest {
    
    const filterSensitiveLog: (obj: CreateFleetMetricRequest) => any;
}
export interface CreateFleetMetricResponse {
    
    metricName?: string;
    
    metricArn?: string;
}
export declare namespace CreateFleetMetricResponse {
    
    const filterSensitiveLog: (obj: CreateFleetMetricResponse) => any;
}

export interface IndexNotReadyException extends __SmithyException, $MetadataBearer {
    name: "IndexNotReadyException";
    $fault: "client";
    
    message?: string;
}

export interface InvalidAggregationException extends __SmithyException, $MetadataBearer {
    name: "InvalidAggregationException";
    $fault: "client";
    message?: string;
}
export declare enum RetryableFailureType {
    ALL = "ALL",
    FAILED = "FAILED",
    TIMED_OUT = "TIMED_OUT"
}

export interface RetryCriteria {
    
    failureType: RetryableFailureType | string | undefined;
    
    numberOfRetries: number | undefined;
}
export declare namespace RetryCriteria {
    
    const filterSensitiveLog: (obj: RetryCriteria) => any;
}

export interface JobExecutionsRetryConfig {
    
    criteriaList: RetryCriteria[] | undefined;
}
export declare namespace JobExecutionsRetryConfig {
    
    const filterSensitiveLog: (obj: JobExecutionsRetryConfig) => any;
}

export interface RateIncreaseCriteria {
    
    numberOfNotifiedThings?: number;
    
    numberOfSucceededThings?: number;
}
export declare namespace RateIncreaseCriteria {
    
    const filterSensitiveLog: (obj: RateIncreaseCriteria) => any;
}

export interface ExponentialRolloutRate {
    
    baseRatePerMinute: number | undefined;
    
    incrementFactor: number | undefined;
    
    rateIncreaseCriteria: RateIncreaseCriteria | undefined;
}
export declare namespace ExponentialRolloutRate {
    
    const filterSensitiveLog: (obj: ExponentialRolloutRate) => any;
}

export interface JobExecutionsRolloutConfig {
    
    maximumPerMinute?: number;
    
    exponentialRate?: ExponentialRolloutRate;
}
export declare namespace JobExecutionsRolloutConfig {
    
    const filterSensitiveLog: (obj: JobExecutionsRolloutConfig) => any;
}

export interface PresignedUrlConfig {
    
    roleArn?: string;
    
    expiresInSec?: number;
}
export declare namespace PresignedUrlConfig {
    
    const filterSensitiveLog: (obj: PresignedUrlConfig) => any;
}
export declare enum TargetSelection {
    CONTINUOUS = "CONTINUOUS",
    SNAPSHOT = "SNAPSHOT"
}

export interface TimeoutConfig {
    
    inProgressTimeoutInMinutes?: number;
}
export declare namespace TimeoutConfig {
    
    const filterSensitiveLog: (obj: TimeoutConfig) => any;
}
export interface CreateJobRequest {
    
    jobId: string | undefined;
    
    targets: string[] | undefined;
    
    documentSource?: string;
    
    document?: string;
    
    description?: string;
    
    presignedUrlConfig?: PresignedUrlConfig;
    
    targetSelection?: TargetSelection | string;
    
    jobExecutionsRolloutConfig?: JobExecutionsRolloutConfig;
    
    abortConfig?: AbortConfig;
    
    timeoutConfig?: TimeoutConfig;
    
    tags?: Tag[];
    
    namespaceId?: string;
    
    jobTemplateArn?: string;
    
    jobExecutionsRetryConfig?: JobExecutionsRetryConfig;
    
    documentParameters?: {
        [key: string]: string;
    };
}
export declare namespace CreateJobRequest {
    
    const filterSensitiveLog: (obj: CreateJobRequest) => any;
}
export interface CreateJobResponse {
    
    jobArn?: string;
    
    jobId?: string;
    
    description?: string;
}
export declare namespace CreateJobResponse {
    
    const filterSensitiveLog: (obj: CreateJobResponse) => any;
}

export interface ConflictException extends __SmithyException, $MetadataBearer {
    name: "ConflictException";
    $fault: "client";
    message?: string;
}
export interface CreateJobTemplateRequest {
    
    jobTemplateId: string | undefined;
    
    jobArn?: string;
    
    documentSource?: string;
    
    document?: string;
    
    description: string | undefined;
    
    presignedUrlConfig?: PresignedUrlConfig;
    
    jobExecutionsRolloutConfig?: JobExecutionsRolloutConfig;
    
    abortConfig?: AbortConfig;
    
    timeoutConfig?: TimeoutConfig;
    
    tags?: Tag[];
    
    jobExecutionsRetryConfig?: JobExecutionsRetryConfig;
}
export declare namespace CreateJobTemplateRequest {
    
    const filterSensitiveLog: (obj: CreateJobTemplateRequest) => any;
}
export interface CreateJobTemplateResponse {
    
    jobTemplateArn?: string;
    
    jobTemplateId?: string;
}
export declare namespace CreateJobTemplateResponse {
    
    const filterSensitiveLog: (obj: CreateJobTemplateResponse) => any;
}

export interface CreateKeysAndCertificateRequest {
    
    setAsActive?: boolean;
}
export declare namespace CreateKeysAndCertificateRequest {
    
    const filterSensitiveLog: (obj: CreateKeysAndCertificateRequest) => any;
}

export interface KeyPair {
    
    PublicKey?: string;
    
    PrivateKey?: string;
}
export declare namespace KeyPair {
    
    const filterSensitiveLog: (obj: KeyPair) => any;
}

export interface CreateKeysAndCertificateResponse {
    
    certificateArn?: string;
    
    certificateId?: string;
    
    certificatePem?: string;
    
    keyPair?: KeyPair;
}
export declare namespace CreateKeysAndCertificateResponse {
    
    const filterSensitiveLog: (obj: CreateKeysAndCertificateResponse) => any;
}
export declare enum LogLevel {
    DEBUG = "DEBUG",
    DISABLED = "DISABLED",
    ERROR = "ERROR",
    INFO = "INFO",
    WARN = "WARN"
}

export interface EnableIoTLoggingParams {
    
    roleArnForLogging: string | undefined;
    
    logLevel: LogLevel | string | undefined;
}
export declare namespace EnableIoTLoggingParams {
    
    const filterSensitiveLog: (obj: EnableIoTLoggingParams) => any;
}

export interface PublishFindingToSnsParams {
    
    topicArn: string | undefined;
}
export declare namespace PublishFindingToSnsParams {
    
    const filterSensitiveLog: (obj: PublishFindingToSnsParams) => any;
}
export declare enum PolicyTemplateName {
    BLANK_POLICY = "BLANK_POLICY"
}

export interface ReplaceDefaultPolicyVersionParams {
    
    templateName: PolicyTemplateName | string | undefined;
}
export declare namespace ReplaceDefaultPolicyVersionParams {
    
    const filterSensitiveLog: (obj: ReplaceDefaultPolicyVersionParams) => any;
}
export declare enum CACertificateUpdateAction {
    DEACTIVATE = "DEACTIVATE"
}

export interface UpdateCACertificateParams {
    
    action: CACertificateUpdateAction | string | undefined;
}
export declare namespace UpdateCACertificateParams {
    
    const filterSensitiveLog: (obj: UpdateCACertificateParams) => any;
}
export declare enum DeviceCertificateUpdateAction {
    DEACTIVATE = "DEACTIVATE"
}

export interface UpdateDeviceCertificateParams {
    
    action: DeviceCertificateUpdateAction | string | undefined;
}
export declare namespace UpdateDeviceCertificateParams {
    
    const filterSensitiveLog: (obj: UpdateDeviceCertificateParams) => any;
}

export interface MitigationActionParams {
    
    updateDeviceCertificateParams?: UpdateDeviceCertificateParams;
    
    updateCACertificateParams?: UpdateCACertificateParams;
    
    addThingsToThingGroupParams?: AddThingsToThingGroupParams;
    
    replaceDefaultPolicyVersionParams?: ReplaceDefaultPolicyVersionParams;
    
    enableIoTLoggingParams?: EnableIoTLoggingParams;
    
    publishFindingToSnsParams?: PublishFindingToSnsParams;
}
export declare namespace MitigationActionParams {
    
    const filterSensitiveLog: (obj: MitigationActionParams) => any;
}
export interface CreateMitigationActionRequest {
    
    actionName: string | undefined;
    
    roleArn: string | undefined;
    
    actionParams: MitigationActionParams | undefined;
    
    tags?: Tag[];
}
export declare namespace CreateMitigationActionRequest {
    
    const filterSensitiveLog: (obj: CreateMitigationActionRequest) => any;
}
export interface CreateMitigationActionResponse {
    
    actionArn?: string;
    
    actionId?: string;
}
export declare namespace CreateMitigationActionResponse {
    
    const filterSensitiveLog: (obj: CreateMitigationActionResponse) => any;
}
export declare enum AwsJobAbortCriteriaAbortAction {
    CANCEL = "CANCEL"
}
export declare enum AwsJobAbortCriteriaFailureType {
    ALL = "ALL",
    FAILED = "FAILED",
    REJECTED = "REJECTED",
    TIMED_OUT = "TIMED_OUT"
}

export interface AwsJobAbortCriteria {
    
    failureType: AwsJobAbortCriteriaFailureType | string | undefined;
    
    action: AwsJobAbortCriteriaAbortAction | string | undefined;
    
    thresholdPercentage: number | undefined;
    
    minNumberOfExecutedThings: number | undefined;
}
export declare namespace AwsJobAbortCriteria {
    
    const filterSensitiveLog: (obj: AwsJobAbortCriteria) => any;
}

export interface AwsJobAbortConfig {
    
    abortCriteriaList: AwsJobAbortCriteria[] | undefined;
}
export declare namespace AwsJobAbortConfig {
    
    const filterSensitiveLog: (obj: AwsJobAbortConfig) => any;
}

export interface AwsJobRateIncreaseCriteria {
    
    numberOfNotifiedThings?: number;
    
    numberOfSucceededThings?: number;
}
export declare namespace AwsJobRateIncreaseCriteria {
    
    const filterSensitiveLog: (obj: AwsJobRateIncreaseCriteria) => any;
}

export interface AwsJobExponentialRolloutRate {
    
    baseRatePerMinute: number | undefined;
    
    incrementFactor: number | undefined;
    
    rateIncreaseCriteria: AwsJobRateIncreaseCriteria | undefined;
}
export declare namespace AwsJobExponentialRolloutRate {
    
    const filterSensitiveLog: (obj: AwsJobExponentialRolloutRate) => any;
}

export interface AwsJobExecutionsRolloutConfig {
    
    maximumPerMinute?: number;
    
    exponentialRate?: AwsJobExponentialRolloutRate;
}
export declare namespace AwsJobExecutionsRolloutConfig {
    
    const filterSensitiveLog: (obj: AwsJobExecutionsRolloutConfig) => any;
}

export interface AwsJobPresignedUrlConfig {
    
    expiresInSec?: number;
}
export declare namespace AwsJobPresignedUrlConfig {
    
    const filterSensitiveLog: (obj: AwsJobPresignedUrlConfig) => any;
}

export interface AwsJobTimeoutConfig {
    
    inProgressTimeoutInMinutes?: number;
}
export declare namespace AwsJobTimeoutConfig {
    
    const filterSensitiveLog: (obj: AwsJobTimeoutConfig) => any;
}

export interface CodeSigningCertificateChain {
    
    certificateName?: string;
    
    inlineDocument?: string;
}
export declare namespace CodeSigningCertificateChain {
    
    const filterSensitiveLog: (obj: CodeSigningCertificateChain) => any;
}

export interface CodeSigningSignature {
    
    inlineDocument?: Uint8Array;
}
export declare namespace CodeSigningSignature {
    
    const filterSensitiveLog: (obj: CodeSigningSignature) => any;
}

export interface CustomCodeSigning {
    
    signature?: CodeSigningSignature;
    
    certificateChain?: CodeSigningCertificateChain;
    
    hashAlgorithm?: string;
    
    signatureAlgorithm?: string;
}
export declare namespace CustomCodeSigning {
    
    const filterSensitiveLog: (obj: CustomCodeSigning) => any;
}

export interface S3Destination {
    
    bucket?: string;
    
    prefix?: string;
}
export declare namespace S3Destination {
    
    const filterSensitiveLog: (obj: S3Destination) => any;
}

export interface Destination {
    
    s3Destination?: S3Destination;
}
export declare namespace Destination {
    
    const filterSensitiveLog: (obj: Destination) => any;
}

export interface SigningProfileParameter {
    
    certificateArn?: string;
    
    platform?: string;
    
    certificatePathOnDevice?: string;
}
export declare namespace SigningProfileParameter {
    
    const filterSensitiveLog: (obj: SigningProfileParameter) => any;
}

export interface StartSigningJobParameter {
    
    signingProfileParameter?: SigningProfileParameter;
    
    signingProfileName?: string;
    
    destination?: Destination;
}
export declare namespace StartSigningJobParameter {
    
    const filterSensitiveLog: (obj: StartSigningJobParameter) => any;
}

export interface CodeSigning {
    
    awsSignerJobId?: string;
    
    startSigningJobParameter?: StartSigningJobParameter;
    
    customCodeSigning?: CustomCodeSigning;
}
export declare namespace CodeSigning {
    
    const filterSensitiveLog: (obj: CodeSigning) => any;
}

export interface S3Location {
    
    bucket?: string;
    
    key?: string;
    
    version?: string;
}
export declare namespace S3Location {
    
    const filterSensitiveLog: (obj: S3Location) => any;
}

export interface _Stream {
    
    streamId?: string;
    
    fileId?: number;
}
export declare namespace _Stream {
    
    const filterSensitiveLog: (obj: _Stream) => any;
}

export interface FileLocation {
    
    stream?: _Stream;
    
    s3Location?: S3Location;
}
export declare namespace FileLocation {
    
    const filterSensitiveLog: (obj: FileLocation) => any;
}

export interface OTAUpdateFile {
    
    fileName?: string;
    
    fileType?: number;
    
    fileVersion?: string;
    
    fileLocation?: FileLocation;
    
    codeSigning?: CodeSigning;
    
    attributes?: {
        [key: string]: string;
    };
}
export declare namespace OTAUpdateFile {
    
    const filterSensitiveLog: (obj: OTAUpdateFile) => any;
}
export declare enum Protocol {
    HTTP = "HTTP",
    MQTT = "MQTT"
}
export interface CreateOTAUpdateRequest {
    
    otaUpdateId: string | undefined;
    
    description?: string;
    
    targets: string[] | undefined;
    
    protocols?: (Protocol | string)[];
    
    targetSelection?: TargetSelection | string;
    
    awsJobExecutionsRolloutConfig?: AwsJobExecutionsRolloutConfig;
    
    awsJobPresignedUrlConfig?: AwsJobPresignedUrlConfig;
    
    awsJobAbortConfig?: AwsJobAbortConfig;
    
    awsJobTimeoutConfig?: AwsJobTimeoutConfig;
    
    files: OTAUpdateFile[] | undefined;
    
    roleArn: string | undefined;
    
    additionalParameters?: {
        [key: string]: string;
    };
    
    tags?: Tag[];
}
export declare namespace CreateOTAUpdateRequest {
    
    const filterSensitiveLog: (obj: CreateOTAUpdateRequest) => any;
}
export declare enum OTAUpdateStatus {
    CREATE_COMPLETE = "CREATE_COMPLETE",
    CREATE_FAILED = "CREATE_FAILED",
    CREATE_IN_PROGRESS = "CREATE_IN_PROGRESS",
    CREATE_PENDING = "CREATE_PENDING"
}
export interface CreateOTAUpdateResponse {
    
    otaUpdateId?: string;
    
    awsIotJobId?: string;
    
    otaUpdateArn?: string;
    
    awsIotJobArn?: string;
    
    otaUpdateStatus?: OTAUpdateStatus | string;
}
export declare namespace CreateOTAUpdateResponse {
    
    const filterSensitiveLog: (obj: CreateOTAUpdateResponse) => any;
}

export interface CreatePolicyRequest {
    
    policyName: string | undefined;
    
    policyDocument: string | undefined;
    
    tags?: Tag[];
}
export declare namespace CreatePolicyRequest {
    
    const filterSensitiveLog: (obj: CreatePolicyRequest) => any;
}

export interface CreatePolicyResponse {
    
    policyName?: string;
    
    policyArn?: string;
    
    policyDocument?: string;
    
    policyVersionId?: string;
}
export declare namespace CreatePolicyResponse {
    
    const filterSensitiveLog: (obj: CreatePolicyResponse) => any;
}

export interface MalformedPolicyException extends __SmithyException, $MetadataBearer {
    name: "MalformedPolicyException";
    $fault: "client";
    
    message?: string;
}

export interface CreatePolicyVersionRequest {
    
    policyName: string | undefined;
    
    policyDocument: string | undefined;
    
    setAsDefault?: boolean;
}
export declare namespace CreatePolicyVersionRequest {
    
    const filterSensitiveLog: (obj: CreatePolicyVersionRequest) => any;
}

export interface CreatePolicyVersionResponse {
    
    policyArn?: string;
    
    policyDocument?: string;
    
    policyVersionId?: string;
    
    isDefaultVersion?: boolean;
}
export declare namespace CreatePolicyVersionResponse {
    
    const filterSensitiveLog: (obj: CreatePolicyVersionResponse) => any;
}

export interface VersionsLimitExceededException extends __SmithyException, $MetadataBearer {
    name: "VersionsLimitExceededException";
    $fault: "client";
    
    message?: string;
}
export interface CreateProvisioningClaimRequest {
    
    templateName: string | undefined;
}
export declare namespace CreateProvisioningClaimRequest {
    
    const filterSensitiveLog: (obj: CreateProvisioningClaimRequest) => any;
}
export interface CreateProvisioningClaimResponse {
    
    certificateId?: string;
    
    certificatePem?: string;
    
    keyPair?: KeyPair;
    
    expiration?: Date;
}
export declare namespace CreateProvisioningClaimResponse {
    
    const filterSensitiveLog: (obj: CreateProvisioningClaimResponse) => any;
}

export interface ProvisioningHook {
    
    payloadVersion?: string;
    
    targetArn: string | undefined;
}
export declare namespace ProvisioningHook {
    
    const filterSensitiveLog: (obj: ProvisioningHook) => any;
}
export interface CreateProvisioningTemplateRequest {
    
    templateName: string | undefined;
    
    description?: string;
    
    templateBody: string | undefined;
    
    enabled?: boolean;
    
    provisioningRoleArn: string | undefined;
    
    preProvisioningHook?: ProvisioningHook;
    
    tags?: Tag[];
}
export declare namespace CreateProvisioningTemplateRequest {
    
    const filterSensitiveLog: (obj: CreateProvisioningTemplateRequest) => any;
}
export interface CreateProvisioningTemplateResponse {
    
    templateArn?: string;
    
    templateName?: string;
    
    defaultVersionId?: number;
}
export declare namespace CreateProvisioningTemplateResponse {
    
    const filterSensitiveLog: (obj: CreateProvisioningTemplateResponse) => any;
}
export interface CreateProvisioningTemplateVersionRequest {
    
    templateName: string | undefined;
    
    templateBody: string | undefined;
    
    setAsDefault?: boolean;
}
export declare namespace CreateProvisioningTemplateVersionRequest {
    
    const filterSensitiveLog: (obj: CreateProvisioningTemplateVersionRequest) => any;
}
export interface CreateProvisioningTemplateVersionResponse {
    
    templateArn?: string;
    
    templateName?: string;
    
    versionId?: number;
    
    isDefaultVersion?: boolean;
}
export declare namespace CreateProvisioningTemplateVersionResponse {
    
    const filterSensitiveLog: (obj: CreateProvisioningTemplateVersionResponse) => any;
}
export interface CreateRoleAliasRequest {
    
    roleAlias: string | undefined;
    
    roleArn: string | undefined;
    
    credentialDurationSeconds?: number;
    
    tags?: Tag[];
}
export declare namespace CreateRoleAliasRequest {
    
    const filterSensitiveLog: (obj: CreateRoleAliasRequest) => any;
}
export interface CreateRoleAliasResponse {
    
    roleAlias?: string;
    
    roleAliasArn?: string;
}
export declare namespace CreateRoleAliasResponse {
    
    const filterSensitiveLog: (obj: CreateRoleAliasResponse) => any;
}
export declare enum DayOfWeek {
    FRI = "FRI",
    MON = "MON",
    SAT = "SAT",
    SUN = "SUN",
    THU = "THU",
    TUE = "TUE",
    WED = "WED"
}
export interface CreateScheduledAuditRequest {
    
    frequency: AuditFrequency | string | undefined;
    
    dayOfMonth?: string;
    
    dayOfWeek?: DayOfWeek | string;
    
    targetCheckNames: string[] | undefined;
    
    scheduledAuditName: string | undefined;
    
    tags?: Tag[];
}
export declare namespace CreateScheduledAuditRequest {
    
    const filterSensitiveLog: (obj: CreateScheduledAuditRequest) => any;
}
export interface CreateScheduledAuditResponse {
    
    scheduledAuditArn?: string;
}
export declare namespace CreateScheduledAuditResponse {
    
    const filterSensitiveLog: (obj: CreateScheduledAuditResponse) => any;
}
export interface CreateSecurityProfileRequest {
    
    securityProfileName: string | undefined;
    
    securityProfileDescription?: string;
    
    behaviors?: Behavior[];
    
    alertTargets?: {
        [key: string]: AlertTarget;
    };
    
    additionalMetricsToRetain?: string[];
    
    additionalMetricsToRetainV2?: MetricToRetain[];
    
    tags?: Tag[];
}
export declare namespace CreateSecurityProfileRequest {
    
    const filterSensitiveLog: (obj: CreateSecurityProfileRequest) => any;
}
export interface CreateSecurityProfileResponse {
    
    securityProfileName?: string;
    
    securityProfileArn?: string;
}
export declare namespace CreateSecurityProfileResponse {
    
    const filterSensitiveLog: (obj: CreateSecurityProfileResponse) => any;
}

export interface StreamFile {
    
    fileId?: number;
    
    s3Location?: S3Location;
}
export declare namespace StreamFile {
    
    const filterSensitiveLog: (obj: StreamFile) => any;
}
export interface CreateStreamRequest {
    
    streamId: string | undefined;
    
    description?: string;
    
    files: StreamFile[] | undefined;
    
    roleArn: string | undefined;
    
    tags?: Tag[];
}
export declare namespace CreateStreamRequest {
    
    const filterSensitiveLog: (obj: CreateStreamRequest) => any;
}
export interface CreateStreamResponse {
    
    streamId?: string;
    
    streamArn?: string;
    
    description?: string;
    
    streamVersion?: number;
}
export declare namespace CreateStreamResponse {
    
    const filterSensitiveLog: (obj: CreateStreamResponse) => any;
}

export interface CreateThingRequest {
    
    thingName: string | undefined;
    
    thingTypeName?: string;
    
    attributePayload?: AttributePayload;
    
    billingGroupName?: string;
}
export declare namespace CreateThingRequest {
    
    const filterSensitiveLog: (obj: CreateThingRequest) => any;
}

export interface CreateThingResponse {
    
    thingName?: string;
    
    thingArn?: string;
    
    thingId?: string;
}
export declare namespace CreateThingResponse {
    
    const filterSensitiveLog: (obj: CreateThingResponse) => any;
}
export interface CreateThingGroupRequest {
    
    thingGroupName: string | undefined;
    
    parentGroupName?: string;
    
    thingGroupProperties?: ThingGroupProperties;
    
    tags?: Tag[];
}
export declare namespace CreateThingGroupRequest {
    
    const filterSensitiveLog: (obj: CreateThingGroupRequest) => any;
}
export interface CreateThingGroupResponse {
    
    thingGroupName?: string;
    
    thingGroupArn?: string;
    
    thingGroupId?: string;
}
export declare namespace CreateThingGroupResponse {
    
    const filterSensitiveLog: (obj: CreateThingGroupResponse) => any;
}

export interface ThingTypeProperties {
    
    thingTypeDescription?: string;
    
    searchableAttributes?: string[];
}
export declare namespace ThingTypeProperties {
    
    const filterSensitiveLog: (obj: ThingTypeProperties) => any;
}

export interface CreateThingTypeRequest {
    
    thingTypeName: string | undefined;
    
    thingTypeProperties?: ThingTypeProperties;
    
    tags?: Tag[];
}
export declare namespace CreateThingTypeRequest {
    
    const filterSensitiveLog: (obj: CreateThingTypeRequest) => any;
}

export interface CreateThingTypeResponse {
    
    thingTypeName?: string;
    
    thingTypeArn?: string;
    
    thingTypeId?: string;
}
export declare namespace CreateThingTypeResponse {
    
    const filterSensitiveLog: (obj: CreateThingTypeResponse) => any;
}

export interface TopicRulePayload {
    
    sql: string | undefined;
    
    description?: string;
    
    actions: Action[] | undefined;
    
    ruleDisabled?: boolean;
    
    awsIotSqlVersion?: string;
    
    errorAction?: Action;
}
export declare namespace TopicRulePayload {
    
    const filterSensitiveLog: (obj: TopicRulePayload) => any;
}

export interface CreateTopicRuleRequest {
    
    ruleName: string | undefined;
    
    topicRulePayload: TopicRulePayload | undefined;
    
    tags?: string;
}
export declare namespace CreateTopicRuleRequest {
    
    const filterSensitiveLog: (obj: CreateTopicRuleRequest) => any;
}

export interface SqlParseException extends __SmithyException, $MetadataBearer {
    name: "SqlParseException";
    $fault: "client";
    
    message?: string;
}

export interface HttpUrlDestinationConfiguration {
    
    confirmationUrl: string | undefined;
}
export declare namespace HttpUrlDestinationConfiguration {
    
    const filterSensitiveLog: (obj: HttpUrlDestinationConfiguration) => any;
}

export interface VpcDestinationConfiguration {
    
    subnetIds: string[] | undefined;
    
    securityGroups?: string[];
    
    vpcId: string | undefined;
    
    roleArn: string | undefined;
}
export declare namespace VpcDestinationConfiguration {
    
    const filterSensitiveLog: (obj: VpcDestinationConfiguration) => any;
}

export interface TopicRuleDestinationConfiguration {
    
    httpUrlConfiguration?: HttpUrlDestinationConfiguration;
    
    vpcConfiguration?: VpcDestinationConfiguration;
}
export declare namespace TopicRuleDestinationConfiguration {
    
    const filterSensitiveLog: (obj: TopicRuleDestinationConfiguration) => any;
}
export interface CreateTopicRuleDestinationRequest {
    
    destinationConfiguration: TopicRuleDestinationConfiguration | undefined;
}
export declare namespace CreateTopicRuleDestinationRequest {
    
    const filterSensitiveLog: (obj: CreateTopicRuleDestinationRequest) => any;
}

export interface HttpUrlDestinationProperties {
    
    confirmationUrl?: string;
}
export declare namespace HttpUrlDestinationProperties {
    
    const filterSensitiveLog: (obj: HttpUrlDestinationProperties) => any;
}
export declare enum TopicRuleDestinationStatus {
    DELETING = "DELETING",
    DISABLED = "DISABLED",
    ENABLED = "ENABLED",
    ERROR = "ERROR",
    IN_PROGRESS = "IN_PROGRESS"
}

export interface VpcDestinationProperties {
    
    subnetIds?: string[];
    
    securityGroups?: string[];
    
    vpcId?: string;
    
    roleArn?: string;
}
export declare namespace VpcDestinationProperties {
    
    const filterSensitiveLog: (obj: VpcDestinationProperties) => any;
}

export interface TopicRuleDestination {
    
    arn?: string;
    
    status?: TopicRuleDestinationStatus | string;
    
    createdAt?: Date;
    
    lastUpdatedAt?: Date;
    
    statusReason?: string;
    
    httpUrlProperties?: HttpUrlDestinationProperties;
    
    vpcProperties?: VpcDestinationProperties;
}
export declare namespace TopicRuleDestination {
    
    const filterSensitiveLog: (obj: TopicRuleDestination) => any;
}
export interface CreateTopicRuleDestinationResponse {
    
    topicRuleDestination?: TopicRuleDestination;
}
export declare namespace CreateTopicRuleDestinationResponse {
    
    const filterSensitiveLog: (obj: CreateTopicRuleDestinationResponse) => any;
}
export interface DeleteAccountAuditConfigurationRequest {
    
    deleteScheduledAudits?: boolean;
}
export declare namespace DeleteAccountAuditConfigurationRequest {
    
    const filterSensitiveLog: (obj: DeleteAccountAuditConfigurationRequest) => any;
}
export interface DeleteAccountAuditConfigurationResponse {
}
export declare namespace DeleteAccountAuditConfigurationResponse {
    
    const filterSensitiveLog: (obj: DeleteAccountAuditConfigurationResponse) => any;
}
export interface DeleteAuditSuppressionRequest {
    
    checkName: string | undefined;
    
    resourceIdentifier: ResourceIdentifier | undefined;
}
export declare namespace DeleteAuditSuppressionRequest {
    
    const filterSensitiveLog: (obj: DeleteAuditSuppressionRequest) => any;
}
export interface DeleteAuditSuppressionResponse {
}
export declare namespace DeleteAuditSuppressionResponse {
    
    const filterSensitiveLog: (obj: DeleteAuditSuppressionResponse) => any;
}
export interface DeleteAuthorizerRequest {
    
    authorizerName: string | undefined;
}
export declare namespace DeleteAuthorizerRequest {
    
    const filterSensitiveLog: (obj: DeleteAuthorizerRequest) => any;
}
export interface DeleteAuthorizerResponse {
}
export declare namespace DeleteAuthorizerResponse {
    
    const filterSensitiveLog: (obj: DeleteAuthorizerResponse) => any;
}

export interface DeleteConflictException extends __SmithyException, $MetadataBearer {
    name: "DeleteConflictException";
    $fault: "client";
    
    message?: string;
}
export interface DeleteBillingGroupRequest {
    
    billingGroupName: string | undefined;
    
    expectedVersion?: number;
}
export declare namespace DeleteBillingGroupRequest {
    
    const filterSensitiveLog: (obj: DeleteBillingGroupRequest) => any;
}
export interface DeleteBillingGroupResponse {
}
export declare namespace DeleteBillingGroupResponse {
    
    const filterSensitiveLog: (obj: DeleteBillingGroupResponse) => any;
}

export interface CertificateStateException extends __SmithyException, $MetadataBearer {
    name: "CertificateStateException";
    $fault: "client";
    
    message?: string;
}

export interface DeleteCACertificateRequest {
    
    certificateId: string | undefined;
}
export declare namespace DeleteCACertificateRequest {
    
    const filterSensitiveLog: (obj: DeleteCACertificateRequest) => any;
}

export interface DeleteCACertificateResponse {
}
export declare namespace DeleteCACertificateResponse {
    
    const filterSensitiveLog: (obj: DeleteCACertificateResponse) => any;
}

export interface DeleteCertificateRequest {
    
    certificateId: string | undefined;
    
    forceDelete?: boolean;
}
export declare namespace DeleteCertificateRequest {
    
    const filterSensitiveLog: (obj: DeleteCertificateRequest) => any;
}
export interface DeleteCustomMetricRequest {
    
    metricName: string | undefined;
}
export declare namespace DeleteCustomMetricRequest {
    
    const filterSensitiveLog: (obj: DeleteCustomMetricRequest) => any;
}
export interface DeleteCustomMetricResponse {
}
export declare namespace DeleteCustomMetricResponse {
    
    const filterSensitiveLog: (obj: DeleteCustomMetricResponse) => any;
}
export interface DeleteDimensionRequest {
    
    name: string | undefined;
}
export declare namespace DeleteDimensionRequest {
    
    const filterSensitiveLog: (obj: DeleteDimensionRequest) => any;
}
export interface DeleteDimensionResponse {
}
export declare namespace DeleteDimensionResponse {
    
    const filterSensitiveLog: (obj: DeleteDimensionResponse) => any;
}
export interface DeleteDomainConfigurationRequest {
    
    domainConfigurationName: string | undefined;
}
export declare namespace DeleteDomainConfigurationRequest {
    
    const filterSensitiveLog: (obj: DeleteDomainConfigurationRequest) => any;
}
export interface DeleteDomainConfigurationResponse {
}
export declare namespace DeleteDomainConfigurationResponse {
    
    const filterSensitiveLog: (obj: DeleteDomainConfigurationResponse) => any;
}
export interface DeleteDynamicThingGroupRequest {
    
    thingGroupName: string | undefined;
    
    expectedVersion?: number;
}
export declare namespace DeleteDynamicThingGroupRequest {
    
    const filterSensitiveLog: (obj: DeleteDynamicThingGroupRequest) => any;
}
export interface DeleteDynamicThingGroupResponse {
}
export declare namespace DeleteDynamicThingGroupResponse {
    
    const filterSensitiveLog: (obj: DeleteDynamicThingGroupResponse) => any;
}
export interface DeleteFleetMetricRequest {
    
    metricName: string | undefined;
    
    expectedVersion?: number;
}
export declare namespace DeleteFleetMetricRequest {
    
    const filterSensitiveLog: (obj: DeleteFleetMetricRequest) => any;
}
export interface DeleteJobRequest {
    
    jobId: string | undefined;
    
    force?: boolean;
    
    namespaceId?: string;
}
export declare namespace DeleteJobRequest {
    
    const filterSensitiveLog: (obj: DeleteJobRequest) => any;
}
export interface DeleteJobExecutionRequest {
    
    jobId: string | undefined;
    
    thingName: string | undefined;
    
    executionNumber: number | undefined;
    
    force?: boolean;
    
    namespaceId?: string;
}
export declare namespace DeleteJobExecutionRequest {
    
    const filterSensitiveLog: (obj: DeleteJobExecutionRequest) => any;
}
export interface DeleteJobTemplateRequest {
    
    jobTemplateId: string | undefined;
}
export declare namespace DeleteJobTemplateRequest {
    
    const filterSensitiveLog: (obj: DeleteJobTemplateRequest) => any;
}
export interface DeleteMitigationActionRequest {
    
    actionName: string | undefined;
}
export declare namespace DeleteMitigationActionRequest {
    
    const filterSensitiveLog: (obj: DeleteMitigationActionRequest) => any;
}
export interface DeleteMitigationActionResponse {
}
export declare namespace DeleteMitigationActionResponse {
    
    const filterSensitiveLog: (obj: DeleteMitigationActionResponse) => any;
}
export interface DeleteOTAUpdateRequest {
    
    otaUpdateId: string | undefined;
    
    deleteStream?: boolean;
    
    forceDeleteAWSJob?: boolean;
}
export declare namespace DeleteOTAUpdateRequest {
    
    const filterSensitiveLog: (obj: DeleteOTAUpdateRequest) => any;
}
export interface DeleteOTAUpdateResponse {
}
export declare namespace DeleteOTAUpdateResponse {
    
    const filterSensitiveLog: (obj: DeleteOTAUpdateResponse) => any;
}

export interface DeletePolicyRequest {
    
    policyName: string | undefined;
}
export declare namespace DeletePolicyRequest {
    
    const filterSensitiveLog: (obj: DeletePolicyRequest) => any;
}

export interface DeletePolicyVersionRequest {
    
    policyName: string | undefined;
    
    policyVersionId: string | undefined;
}
export declare namespace DeletePolicyVersionRequest {
    
    const filterSensitiveLog: (obj: DeletePolicyVersionRequest) => any;
}
export interface DeleteProvisioningTemplateRequest {
    
    templateName: string | undefined;
}
export declare namespace DeleteProvisioningTemplateRequest {
    
    const filterSensitiveLog: (obj: DeleteProvisioningTemplateRequest) => any;
}
export interface DeleteProvisioningTemplateResponse {
}
export declare namespace DeleteProvisioningTemplateResponse {
    
    const filterSensitiveLog: (obj: DeleteProvisioningTemplateResponse) => any;
}
export interface DeleteProvisioningTemplateVersionRequest {
    
    templateName: string | undefined;
    
    versionId: number | undefined;
}
export declare namespace DeleteProvisioningTemplateVersionRequest {
    
    const filterSensitiveLog: (obj: DeleteProvisioningTemplateVersionRequest) => any;
}
export interface DeleteProvisioningTemplateVersionResponse {
}
export declare namespace DeleteProvisioningTemplateVersionResponse {
    
    const filterSensitiveLog: (obj: DeleteProvisioningTemplateVersionResponse) => any;
}

export interface DeleteRegistrationCodeRequest {
}
export declare namespace DeleteRegistrationCodeRequest {
    
    const filterSensitiveLog: (obj: DeleteRegistrationCodeRequest) => any;
}

export interface DeleteRegistrationCodeResponse {
}
export declare namespace DeleteRegistrationCodeResponse {
    
    const filterSensitiveLog: (obj: DeleteRegistrationCodeResponse) => any;
}
export interface DeleteRoleAliasRequest {
    
    roleAlias: string | undefined;
}
export declare namespace DeleteRoleAliasRequest {
    
    const filterSensitiveLog: (obj: DeleteRoleAliasRequest) => any;
}
export interface DeleteRoleAliasResponse {
}
export declare namespace DeleteRoleAliasResponse {
    
    const filterSensitiveLog: (obj: DeleteRoleAliasResponse) => any;
}
